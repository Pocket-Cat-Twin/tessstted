#!/usr/bin/env node

/**
 * Test API Database Connection
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ API –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API
 */

const { execSync } = require('child_process');

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø API –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•');
console.log('===============================================');

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const DB_USER = 'postgres';
const DB_PASS = 'postgres';
const DB_HOST = 'localhost';
const DB_PORT = '5432';
const DB_NAME = 'yuyu_lolita';
const CONNECTION_STRING = `postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}`;

console.log(`üîó Connection String: ${CONNECTION_STRING.replace(/:\/\/[^:]*:[^@]*@/, '://***:***@')}`);
console.log('');

// –¢–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç API
const tests = [
  {
    name: '–ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ',
    sql: 'SELECT current_user, current_database(), version();',
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
  },
  {
    name: '–î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ users (—Ç–µ—Å—Ç API)',
    sql: 'SELECT COUNT(*) as user_count FROM users;',
    description: '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ users (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ API)'
  },
  {
    name: '–î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ config (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç API)', 
    sql: 'SELECT COUNT(*) as config_count FROM config;',
    description: '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ config (—ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç API –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)'
  },
  {
    name: '–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ config (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ API)',
    sql: 'SELECT key, value, type FROM config LIMIT 1;',
    description: '–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ API –∫–æ–¥–∞'
  },
  {
    name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ config',
    sql: `INSERT INTO config (key, value, type, description) VALUES ('api_test_key', 'api_test_value', 'string', 'Test from API connection') ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value;`,
    description: '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (API –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)'
  },
  {
    name: '–¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏', 
    sql: `SELECT key, value FROM config WHERE key = 'api_test_key';`,
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞'
  },
  {
    name: '–î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ orders',
    sql: 'SELECT COUNT(*) as orders_count FROM orders;',
    description: '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ orders (–æ—Å–Ω–æ–≤–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ API)'
  },
  {
    name: '–î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ customers',
    sql: 'SELECT COUNT(*) as customers_count FROM customers;', 
    description: '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ customers'
  },
  {
    name: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (JOIN)',
    sql: `SELECT 
            (SELECT COUNT(*) FROM users) as users_count,
            (SELECT COUNT(*) FROM orders) as orders_count, 
            (SELECT COUNT(*) FROM config) as config_count,
            (SELECT COUNT(*) FROM customers) as customers_count;`,
    description: '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å API'
  }
];

// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
let passedTests = 0;
let totalTests = tests.length;

console.log(`üìä –í—ã–ø–æ–ª–Ω—è–µ–º ${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...\n`);

for (let i = 0; i < tests.length; i++) {
  const test = tests[i];
  const testNumber = i + 1;
  
  try {
    console.log(`üîÑ –¢–µ—Å—Ç ${testNumber}/${totalTests}: ${test.name}`);
    console.log(`   üí° ${test.description}`);
    
    const result = execSync(
      `PGPASSWORD=${DB_PASS} psql "${CONNECTION_STRING}" -c "${test.sql}"`,
      { 
        encoding: 'utf8', 
        timeout: 10000,
        stdio: ['pipe', 'pipe', 'pipe']
      }
    );
    
    console.log(`   ‚úÖ –£–°–ü–ï–•`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if (test.sql.includes('SELECT') && !test.sql.includes('COUNT(*)')) {
      const lines = result.trim().split('\n');
      const dataLines = lines.slice(2, -2); // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ñ—É—Ç–µ—Ä
      if (dataLines.length > 0) {
        console.log(`   üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${dataLines.join(' | ')}`);
      }
    }
    
    passedTests++;
    
  } catch (error) {
    console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${error.message.split('\n')[0]}`);
  }
  
  console.log('');
}

// –ò—Ç–æ–≥–∏
console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
console.log('==========================');
console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`);
console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round(passedTests/totalTests*100)}%`);
console.log('');

if (passedTests === totalTests) {
  console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
  console.log('üöÄ API –°–ú–û–ñ–ï–¢ –ü–û–õ–ù–û–¶–ï–ù–ù–û –†–ê–ë–û–¢–ê–¢–¨ –° –≠–¢–û–ô –ë–ê–ó–û–ô –î–ê–ù–ù–´–•!');
  console.log('');
  console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:');
  console.log('   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  console.log('   ‚Ä¢ –ß—Ç–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü');
  console.log('   ‚Ä¢ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ config');
  console.log('   ‚Ä¢ –°–ª–æ–∂–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã');
  console.log('   ‚Ä¢ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å API –∫–æ–¥–æ–º');
  console.log('');
  console.log('üîó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
  console.log(`   DATABASE_URL=${CONNECTION_STRING.replace(/:\/\/[^:]*:[^@]*@/, '://***:***@')}`);
  
} else {
  console.log('‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò');
  console.log(`   ${totalTests - passedTests} –∏–∑ ${totalTests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ—É–¥–∞—á–Ω—ã`);
  console.log('   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º API');
}

console.log('');