// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ API
const postgres = require('postgres');

async function testDatabaseConnection() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ë–î');
  console.log('üéØ –¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞ "overall_verification_status –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');

  const sql = postgres({
    host: '/var/run/postgresql',
    database: 'yuyu_lolita',
    username: 'postgres',
  });

  try {
    console.log('\nüìä 1. –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î...');
    const connection = await sql`SELECT current_database() as db, current_user as user_name, NOW() as current_time`;
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î:', connection[0].db);
    console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', connection[0].user_name);

    console.log('\nüîç 2. –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–û–ô –ü–†–û–ë–õ–ï–ú–´...');
    console.log('   –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –æ—à–∏–±–∫—É "overall_verification_status –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"');
    
    // –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —Ä–∞–Ω—å—à–µ –≤—ã–∑—ã–≤–∞–ª –æ—à–∏–±–∫—É
    const problemQuery = await sql`
      SELECT id, email, overall_verification_status, failed_login_attempts, email_verified_at
      FROM users 
      WHERE email = 'nonexistent@test.com'
      LIMIT 1
    `;
    
    console.log('‚úÖ –£–°–ü–ï–•! –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç:', problemQuery.length, '–∑–∞–ø–∏—Å–µ–π)');

    console.log('\nüí° 3. –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø...');
    console.log('   –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏');
    
    const testUser = await sql`
      INSERT INTO users (
        email, 
        password, 
        registration_method, 
        overall_verification_status,
        failed_login_attempts,
        email_verified_at,
        phone_verified_at
      ) VALUES (
        'final-test@example.com',
        'test123',
        'email',
        'unverified',
        0,
        NULL,
        NULL
      )
      RETURNING id, email, overall_verification_status, failed_login_attempts
    `;
    
    console.log('‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–û–ó–î–ê–ù:', testUser[0]);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const updatedUser = await sql`
      UPDATE users 
      SET overall_verification_status = 'partial', failed_login_attempts = 1
      WHERE email = 'final-test@example.com'
      RETURNING email, overall_verification_status, failed_login_attempts
    `;
    
    console.log('‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –û–ë–ù–û–í–õ–ï–ù:', updatedUser[0]);
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await sql`DELETE FROM users WHERE email = 'final-test@example.com'`;
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');

    console.log('\nüéØ 4. –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–û–õ–ï–ô...');
    const criticalFields = [
      'overall_verification_status',
      'failed_login_attempts', 
      'locked_until',
      'email_verified_at',
      'phone_verified_at'
    ];
    
    for (const field of criticalFields) {
      const fieldExists = await sql`
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = ${field}
      `;
      console.log(`   ${field}:`, fieldExists.length > 0 ? '‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û');
    }

    console.log('\nüèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('===============================================');
    console.log('‚úÖ –ò–°–•–û–î–ù–ê–Ø –û–®–ò–ë–ö–ê –ü–û–õ–ù–û–°–¢–¨–Æ –£–°–¢–†–ê–ù–ï–ù–ê!');
    console.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è —Å–æ–∑–¥–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    console.log('‚úÖ API –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ "—Å—Ç–æ–ª–±–µ—Ü overall_verification_status –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" –†–ï–®–ï–ù–ê');

  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    
    if (error.message.includes('overall_verification_status')) {
      console.error('üö® –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    }
    
    console.error('   –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await sql.end();
  }
}

testDatabaseConnection();