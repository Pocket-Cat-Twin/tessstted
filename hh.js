// HH.ru Auto-Response Script - ULTRA SECURE VERSION  
// –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ + –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π URL-–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å + DOM-–∑–∞—â–∏—Ç–∞ + –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
(function() {
    'use strict';
    
    console.log('üöÄ HH Script - ULTRA SECURE VERSION - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    
    // ========================================
    // –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –ù–ê–í–ò–ì–ê–¶–ò–ò
    // ========================================
    
    function setupNavigationProtection() {
        console.log('üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
        
        // –§–ª–∞–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
        window.HH_NAVIGATION_ALLOWED = false;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        const originalMethods = {
            replace: window.location.replace.bind(window.location),
            assign: window.location.assign.bind(window.location),
            reload: window.location.reload.bind(window.location),
            open: window.open.bind(window),
            pushState: history.pushState.bind(history),
            replaceState: history.replaceState.bind(history),
            go: history.go.bind(history),
            back: history.back.bind(history),
            forward: history.forward.bind(history)
        };
        
        // –£–°–ò–õ–ï–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –ú–ï–¢–û–î–û–í –ù–ê–í–ò–ì–ê–¶–ò–ò
        const blockNavigation = function(methodName, originalMethod, args) {
            if (window.HH_NAVIGATION_ALLOWED) {
                console.log('üîì –†–ê–ó–†–ï–®–ï–ù–û: ' + methodName + '(' + (args[0] || '') + ')');
                return originalMethod.apply(this, args);
            }
            console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: ' + methodName + '(' + (args[0] || '') + ')');
            return false;
        };

        // –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ú–ï–¢–û–î–û–í –ù–ê–í–ò–ì–ê–¶–ò–ò
        const safeOverride = (obj, prop, newFunc, description) => {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ
                const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
                
                if (descriptor && descriptor.configurable === false) {
                    console.log('‚ö†Ô∏è –°–≤–æ–π—Å—Ç–≤–æ ' + description + ' –∑–∞—â–∏—â–µ–Ω–æ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å
                if (descriptor && descriptor.writable === false) {
                    console.log('‚ö†Ô∏è –°–≤–æ–π—Å—Ç–≤–æ ' + description + ' —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                    return false;
                }
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ defineProperty
                Object.defineProperty(obj, prop, {
                    value: newFunc,
                    writable: true,
                    configurable: true
                });
                
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ' + description);
                return true;
                
            } catch (e) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ' + description + ':', e.message);
                // –ù–ï –¥–µ–ª–∞–µ–º fallback –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
                return false;
            }
        };

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å location.replace –±–µ–∑–æ–ø–∞—Å–Ω–æ
        safeOverride(window.location, 'replace', 
            function(url) { return blockNavigation('location.replace', originalMethods.replace, arguments); },
            'location.replace'
        );
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å location.assign –±–µ–∑–æ–ø–∞—Å–Ω–æ
        safeOverride(window.location, 'assign',
            function(url) { return blockNavigation('location.assign', originalMethods.assign, arguments); },
            'location.assign'
        );
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å location.reload –±–µ–∑–æ–ø–∞—Å–Ω–æ
        safeOverride(window.location, 'reload',
            function(force) { return blockNavigation('location.reload', originalMethods.reload, arguments); },
            'location.reload'
        );
        
        // window.open –æ–±—ã—á–Ω–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
        safeOverride(window, 'open',
            function(url, name, features) { 
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalMethods.open(url, name, features);
                }
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: window.open(' + url + ')');
                return null;
            },
            'window.open'
        );
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º History API –±–µ–∑–æ–ø–∞—Å–Ω–æ
        safeOverride(history, 'pushState',
            function(state, title, url) {
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalMethods.pushState(state, title, url);
                }
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: history.pushState()');
                return false;
            },
            'history.pushState'
        );
        
        safeOverride(history, 'replaceState',
            function(state, title, url) {
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalMethods.replaceState(state, title, url);
                }
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: history.replaceState()');
                return false;
            },
            'history.replaceState'
        );
        
        safeOverride(history, 'go',
            function(delta) {
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalMethods.go(delta);
                }
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: history.go()');
                return false;
            },
            'history.go'
        );
        
        safeOverride(history, 'back',
            function() {
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalMethods.back();
                }
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: history.back()');
                return false;
            },
            'history.back'
        );
        
        safeOverride(history, 'forward',
            function() {
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalMethods.forward();
                }
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: history.forward()');
                return false;
            },
            'history.forward'
        );
        
        // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê LOCATION –°–í–û–ô–°–¢–í
        const safeDefineProperty = (obj, prop, getter, setter, description) => {
            try {
                const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
                
                if (descriptor && descriptor.configurable === false) {
                    console.log('‚ö†Ô∏è –°–≤–æ–π—Å—Ç–≤–æ ' + description + ' –∑–∞—â–∏—â–µ–Ω–æ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                    return false;
                }
                
                Object.defineProperty(obj, prop, {
                    get: getter,
                    set: setter,
                    configurable: true
                });
                
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ' + description);
                return true;
                
            } catch (e) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ' + description + ':', e.message);
                return false;
            }
        };
        
        // –ü—ã—Ç–∞–µ–º—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å location.href
        safeDefineProperty(window.location, 'href',
            function() { return window.location.href; },
            function(url) {
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalMethods.assign(url);
                } else {
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: location.href = ' + url);
                    return; // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ–º
                }
            },
            'location.href'
        );
        
        // –ü—ã—Ç–∞–µ–º—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å location.pathname
        safeDefineProperty(window.location, 'pathname',
            function() { return window.location.pathname; },
            function(path) {
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalMethods.assign(window.location.origin + path + window.location.search + window.location.hash);
                } else {
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: location.pathname = ' + path);
                    return;
                }
            },
            'location.pathname'
        );
        
        // –ü—ã—Ç–∞–µ–º—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å location.search
        safeDefineProperty(window.location, 'search',
            function() { return window.location.search; },
            function(search) {
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalMethods.assign(window.location.origin + window.location.pathname + search + window.location.hash);
                } else {
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: location.search = ' + search);
                    return;
                }
            },
            'location.search'
        );
        
        // hash –æ–±—ã—á–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        safeDefineProperty(window.location, 'hash',
            function() { return window.location.hash; },
            function(hash) {
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalMethods.assign(window.location.origin + window.location.pathname + window.location.search + hash);
                } else {
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: location.hash = ' + hash);
                    return; // –†–∞–∑—Ä–µ—à–∞–µ–º hash, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
                }
            },
            'location.hash'
        );
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê –ù–ê –°–õ–£–ß–ê–ô –ù–ï–£–î–ê–ß–ù–û–ì–û –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ú–ï–¢–û–î–û–í
        console.log('üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è...');
        
        // –¢–û–õ–¨–ö–û –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–†–ò –†–ï–ê–õ–¨–ù–û–ú –£–•–û–î–ï –° –°–¢–†–ê–ù–ò–¶–´
        const emergencyBlockUnload = function(e) {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–µ–Ω –ò –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
            if (!scriptActive || window.HH_NAVIGATION_ALLOWED) return;
            
            console.log('üö´ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É');
            e.preventDefault();
            e.stopPropagation();
            
            // –î–ª—è beforeunload –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ
            if (e.type === 'beforeunload') {
                const message = 'HH Script –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
                e.returnValue = message;
                return message;
            }
            
            return false;
        };
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ë–ï–ó beforeunload –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω)
        window.addEventListener('unload', emergencyBlockUnload, true);
        window.addEventListener('pagehide', emergencyBlockUnload, true);
        
        // –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –∑–∞—â–∏—Ç–∞ —á–µ—Ä–µ–∑ setInterval - –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –∫–∞–∂–¥—ã–µ 200–º—Å
        const urlWatcher = setInterval(() => {
            if (window.HH_NAVIGATION_ALLOWED) {
                // –û–±–Ω–æ–≤–ª—è–µ–º last known URL –∫–æ–≥–¥–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
                window.HH_LAST_KNOWN_URL = window.location.href;
                return;
            }
            
            const currentUrl = window.location.href;
            if (window.HH_LAST_KNOWN_URL && currentUrl !== window.HH_LAST_KNOWN_URL) {
                console.log('üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ê!');
                console.log('–ë—ã–ª–æ:', window.HH_LAST_KNOWN_URL);
                console.log('–°—Ç–∞–ª–æ:', currentUrl);
                
                // –ê–ì–†–ï–°–°–ò–í–ù–´–ô –≤–æ–∑–≤—Ä–∞—Ç - –ø—ã—Ç–∞–µ–º—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤
                try {
                    window.HH_NAVIGATION_ALLOWED = true;
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è history.back()
                    if (history.length > 1) {
                        history.back();
                    } else {
                        // –ï—Å–ª–∏ history.back –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è location.replace
                        location.replace(window.HH_LAST_KNOWN_URL);
                    }
                    
                    // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    setTimeout(() => {
                        window.HH_NAVIGATION_ALLOWED = false;
                        console.log('üîí –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å–Ω–æ–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞');
                    }, 500);
                    
                } catch (e) {
                    console.log('‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:', e.message);
                    // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    try {
                        window.HH_NAVIGATION_ALLOWED = true;
                        window.location.href = window.HH_LAST_KNOWN_URL;
                    } catch (e2) {
                        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º');
                    }
                }
            } else {
                window.HH_LAST_KNOWN_URL = currentUrl;
            }
        }, 200); // –£–≤–µ–ª–∏—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ 5 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        if (!window.HH_NAVIGATION_WATCHERS) {
            window.HH_NAVIGATION_WATCHERS = [];
        }
        window.HH_NAVIGATION_WATCHERS.push(urlWatcher);
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const originalAppendChild = Node.prototype.appendChild;
        const originalInsertBefore = Node.prototype.insertBefore;
        
        Node.prototype.appendChild = function(child) {
            if (!window.HH_NAVIGATION_ALLOWED && child && child.nodeType === 1) {
                const tagName = child.tagName ? child.tagName.toLowerCase() : '';
                const dangerousTags = ['script', 'iframe', 'frame', 'object', 'embed', 'form'];
                
                if (dangerousTags.includes(tagName)) {
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: appendChild –æ–ø–∞—Å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞', tagName);
                    return child; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
                }
                
                // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                if (tagName === 'a' && (!child.dataset || !child.dataset.hhAllowed)) {
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: appendChild –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏');
                    return child;
                }
            }
            
            return originalAppendChild.call(this, child);
        };
        
        Node.prototype.insertBefore = function(child, reference) {
            if (!window.HH_NAVIGATION_ALLOWED && child && child.nodeType === 1) {
                const tagName = child.tagName ? child.tagName.toLowerCase() : '';
                const dangerousTags = ['script', 'iframe', 'frame', 'object', 'embed', 'form'];
                
                if (dangerousTags.includes(tagName)) {
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: insertBefore –æ–ø–∞—Å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞', tagName);
                    return child;
                }
                
                if (tagName === 'a' && (!child.dataset || !child.dataset.hhAllowed)) {
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: insertBefore –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏');
                    return child;
                }
            }
            
            return originalInsertBefore.call(this, child, reference);
        };
        
        console.log('‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è + DOM-–∑–∞—â–∏—Ç–∞)');
    }
    
    // ========================================
    // –ê–ë–°–û–õ–Æ–¢–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –ù–ê–í–ò–ì–ê–¶–ò–ò - –°–ï–ù–¨–û–† –£–†–û–í–ï–ù–¨
    // ========================================
    
    // –°—á–µ—Ç—á–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    let blockedNavigationAttempts = 0;
    let networkRequestsBlocked = 0;
    let domModificationsBlocked = 0;
    
    // –°–ï–¢–ï–í–û–ô –£–†–û–í–ï–ù–¨ –ë–õ–û–ö–ò–†–û–í–ö–ò
    function setupNetworkProtection() {
        console.log('üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –°–ï–¢–ï–í–û–ô –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        const originalFetch = window.fetch;
        const originalXHROpen = XMLHttpRequest.prototype.open;
        const originalXHRSend = XMLHttpRequest.prototype.send;
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê FETCH –ó–ê–ü–†–û–°–û–í
        window.fetch = function(resource, options) {
            if (window.HH_NAVIGATION_ALLOWED) {
                return originalFetch.apply(this, arguments);
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å
            let url = '';
            if (typeof resource === 'string') {
                url = resource;
            } else if (resource && resource.url) {
                url = resource.url;
            } else if (resource && resource.toString) {
                url = resource.toString();
            }
            
            // –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –¢–û–õ–¨–ö–û –î–õ–Ø –ö–†–ò–¢–ò–ß–ù–´–• –ó–ê–ü–†–û–°–û–í –û–¢–ö–õ–ò–ö–û–í
            const isResponseRelated = url && (
                // –¢–û–õ–¨–ö–û –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∫–ª–∏–∫–æ–≤ –∏–∑ HAR —Ñ–∞–π–ª–∞
                url.includes('/shards/vacancy/register_interaction') ||
                url.includes('/applicant/vacancy_response/popup')
            );
            
            if (isResponseRelated) {
                console.log('‚úÖ –†–ê–ó–†–ï–®–ï–ù FETCH –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞: ' + url);
                return originalFetch.apply(this, arguments);
            }
            
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            const isNavigational = url && (
                (url.includes('hh.ru') && !isResponseRelated) ||
                (url.includes('/vacancy') && !url.includes('response')) ||
                url.includes('/search') ||
                url.includes('/redirect') ||
                url.includes('location') ||
                (url.startsWith('http') && !url.includes(window.location.hostname) && !isResponseRelated)
            );
            
            if (isNavigational) {
                networkRequestsBlocked++;
                blockedNavigationAttempts++;
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê FETCH: ' + url);
                console.log(`üìä –í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${networkRequestsBlocked}`);
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º rejected promise
                return Promise.reject(new Error('Navigation request blocked by HH Script'));
            }
            
            return originalFetch.apply(this, arguments);
        };
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê XMLHttpRequest
        XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
            if (window.HH_NAVIGATION_ALLOWED) {
                return originalXHROpen.apply(this, arguments);
            }
            
            // –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –¢–û–õ–¨–ö–û –î–õ–Ø –ö–†–ò–¢–ò–ß–ù–´–• –ó–ê–ü–†–û–°–û–í –û–¢–ö–õ–ò–ö–û–í
            const isResponseRelated = url && (
                // –¢–û–õ–¨–ö–û –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∫–ª–∏–∫–æ–≤ –∏–∑ HAR —Ñ–∞–π–ª–∞
                url.includes('/shards/vacancy/register_interaction') ||
                url.includes('/applicant/vacancy_response/popup')
            );
            
            if (isResponseRelated) {
                console.log('‚úÖ –†–ê–ó–†–ï–®–ï–ù XHR –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞: ' + method + ' ' + url);
                return originalXHROpen.apply(this, arguments);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å
            const isNavigational = url && (
                (url.includes('hh.ru') && !isResponseRelated) ||
                (url.includes('/vacancy') && !url.includes('response')) ||
                url.includes('/search') ||
                url.includes('/redirect') ||
                url.includes('location') ||
                (url.startsWith('http') && !url.includes(window.location.hostname) && !isResponseRelated)
            );
            
            if (isNavigational) {
                networkRequestsBlocked++;
                blockedNavigationAttempts++;
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê XHR: ' + method + ' ' + url);
                console.log(`üìä –í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ XHR –∑–∞–ø—Ä–æ—Å–æ–≤: ${networkRequestsBlocked}`);
                
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                throw new Error('XHR Navigation request blocked by HH Script');
            }
            
            return originalXHROpen.apply(this, arguments);
        };
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê XHR SEND
        XMLHttpRequest.prototype.send = function(data) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            if (this._hhBlocked) {
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê XHR.send() –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
                return;
            }
            
            return originalXHRSend.apply(this, arguments);
        };
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê WEBSOCKET (–º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
        const originalWebSocket = window.WebSocket;
        window.WebSocket = function(url, protocols) {
            if (window.HH_NAVIGATION_ALLOWED) {
                return new originalWebSocket(url, protocols);
            }
            
            console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê WebSocket: ' + url);
            blockedNavigationAttempts++;
            throw new Error('WebSocket blocked by HH Script');
        };
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê SERVICE WORKER
        if ('serviceWorker' in navigator) {
            const originalRegister = navigator.serviceWorker.register;
            navigator.serviceWorker.register = function(scriptURL, options) {
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalRegister.apply(this, arguments);
                }
                
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê ServiceWorker: ' + scriptURL);
                blockedNavigationAttempts++;
                return Promise.reject(new Error('ServiceWorker blocked by HH Script'));
            };
        }
        
        console.log('‚úÖ –°–µ—Ç–µ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // DOM-–£–†–û–í–ï–ù–¨ –ñ–ï–õ–ï–ó–ù–û–ô –ë–õ–û–ö–ò–†–û–í–ö–ò 
    function setupDOMProtection() {
        console.log('üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ DOM –ñ–ï–õ–ï–ó–ù–û–ô –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã DOM
        const originalSetAttribute = Element.prototype.setAttribute;
        const originalSetProperty = Object.setOwnPropertyDescriptor;
        const originalInnerHTML = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML');
        const originalOuterHTML = Object.getOwnPropertyDescriptor(Element.prototype, 'outerHTML');
        const originalReplaceWith = Element.prototype.replaceWith;
        const originalRemove = Element.prototype.remove;
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê setAttribute –î–õ–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò
        Element.prototype.setAttribute = function(name, value) {
            const navigationAttributes = [
                'href', 'src', 'action', 'formaction', 'onclick', 'onload',
                'onbeforeunload', 'onunload', 'onhashchange', 'onpopstate'
            ];
            
            if (!window.HH_NAVIGATION_ALLOWED && navigationAttributes.includes(name.toLowerCase())) {
                console.log(`üö´ DOM –ë–õ–û–ö: setAttribute(${name}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`);
                domModificationsBlocked++;
                return;
            }
            
            return originalSetAttribute.call(this, name, value);
        };
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê innerHTML/outerHTML
        Object.defineProperty(Element.prototype, 'innerHTML', {
            get: originalInnerHTML.get,
            set: function(value) {
                if (!window.HH_NAVIGATION_ALLOWED && 
                    (value.includes('<a ') || value.includes('href=') || 
                     value.includes('<form') || value.includes('action=') ||
                     value.includes('<script') || value.includes('location.') ||
                     value.includes('window.location'))) {
                    console.log('üö´ DOM –ë–õ–û–ö: innerHTML —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                    domModificationsBlocked++;
                    return;
                }
                return originalInnerHTML.set.call(this, value);
            },
            configurable: true
        });
        
        Object.defineProperty(Element.prototype, 'outerHTML', {
            get: originalOuterHTML.get,
            set: function(value) {
                if (!window.HH_NAVIGATION_ALLOWED && 
                    (value.includes('<a ') || value.includes('href=') || 
                     value.includes('<form') || value.includes('action='))) {
                    console.log('üö´ DOM –ë–õ–û–ö: outerHTML —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                    domModificationsBlocked++;
                    return;
                }
                return originalOuterHTML.set.call(this, value);
            },
            configurable: true
        });
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê replaceWith –∏ remove –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        Element.prototype.replaceWith = function(...nodes) {
            if (!window.HH_NAVIGATION_ALLOWED && (this.tagName === 'BODY' || this.tagName === 'HTML')) {
                console.log('üö´ DOM –ë–õ–û–ö: replaceWith –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                domModificationsBlocked++;
                return;
            }
            return originalReplaceWith.apply(this, nodes);
        };
        
        Element.prototype.remove = function() {
            if (!window.HH_NAVIGATION_ALLOWED && (this.tagName === 'BODY' || this.tagName === 'HTML')) {
                console.log('üö´ DOM –ë–õ–û–ö: remove –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                domModificationsBlocked++;
                return;
            }
            return originalRemove.call(this);
        };
        
        // –ê–ì–†–ï–°–°–ò–í–ù–´–ô MutationObserver –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê DOM
        const dangerousObserver = new MutationObserver(function(mutations) {
            if (window.HH_NAVIGATION_ALLOWED) return;
            
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach(function(node) {
                        if (node.nodeType === 1) { // Element node
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                            if (node.tagName === 'A' || node.tagName === 'FORM' || 
                                node.tagName === 'SCRIPT' || node.tagName === 'IFRAME') {
                                console.log(`üö´ DOM –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–¨: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç ${node.tagName} –¥–æ–±–∞–≤–ª–µ–Ω!`);
                                domModificationsBlocked++;
                            }
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                            if (node.hasAttribute && (node.hasAttribute('href') || 
                                node.hasAttribute('onclick') || node.hasAttribute('action'))) {
                                console.log('üö´ DOM –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–¨: –≠–ª–µ–º–µ–Ω—Ç —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏!');
                                domModificationsBlocked++;
                            }
                        }
                    });
                }
                
                if (mutation.type === 'attributes') {
                    const target = mutation.target;
                    const attrName = mutation.attributeName;
                    
                    if (['href', 'src', 'action', 'onclick'].includes(attrName)) {
                        console.log(`üö´ DOM –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–¨: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ ${attrName}!`);
                        domModificationsBlocked++;
                    }
                }
            });
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
        dangerousObserver.observe(document, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeOldValue: true,
            attributeFilter: ['href', 'src', 'action', 'onclick', 'onload']
        });
        
        console.log('‚úÖ DOM –∂–µ–ª–µ–∑–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ë–õ–û–ö–ò–†–û–í–ö–ò –°–û–ë–´–¢–ò–ô
    function setupGlobalEventBlocking() {
        console.log('üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ì–õ–û–ë–ê–õ–¨–ù–û–ô –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
        
        // –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        const criticalEvents = [
            'beforeunload', 'unload', 'pagehide', 'pageshow',
            'hashchange', 'popstate', 'pushstate', 'replacestate',
            'visibilitychange', 'focus', 'blur'
        ];
        
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ window
        criticalEvents.forEach(eventType => {
            window.addEventListener(eventType, function(e) {
                if (!window.HH_NAVIGATION_ALLOWED) {
                    console.log(`üö´ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ë–õ–û–ö: ${eventType} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`);
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    blockedNavigationAttempts++;
                    return false;
                }
            }, true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º capture phase –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        });
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê –í–°–ï–• SUBMIT –°–û–ë–´–¢–ò–ô
        document.addEventListener('submit', function(e) {
            if (!window.HH_NAVIGATION_ALLOWED) {
                const form = e.target;
                const isSearchForm = form && form.closest && form.closest('[data-qa="vacancy-serp__form"]');
                const isAllowed = form && form.dataset && form.dataset.hhAllowed;
                
                if (!isSearchForm && !isAllowed) {
                    console.log('üö´ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ë–õ–û–ö: submit –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', form);
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    blockedNavigationAttempts++;
                    return false;
                }
            }
        }, true);
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê –í–°–ï–• CHANGE –°–û–ë–´–¢–ò–ô –ù–ê –ö–†–ò–¢–ò–ß–ù–´–• –≠–õ–ï–ú–ï–ù–¢–ê–•
        document.addEventListener('change', function(e) {
            if (!window.HH_NAVIGATION_ALLOWED) {
                const target = e.target;
                if (target && (target.type === 'file' || target.tagName === 'SELECT')) {
                    const isAllowed = target.dataset && target.dataset.hhAllowed;
                    const isInSearchForm = target.closest && target.closest('[data-qa="vacancy-serp__form"]');
                    
                    if (!isAllowed && !isInSearchForm) {
                        console.log('üö´ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ë–õ–û–ö: change –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', target);
                        e.preventDefault();
                        e.stopPropagation();
                        blockedNavigationAttempts++;
                        return false;
                    }
                }
            }
        }, true);
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê KEYDOWN/KEYUP –î–õ–Ø –ì–û–†–Ø–ß–ò–• –ö–õ–ê–í–ò–® –ù–ê–í–ò–ì–ê–¶–ò–ò
        const navigationKeys = [
            { key: 'F5', description: 'refresh' },
            { key: 'F12', description: 'devtools' },
            { ctrl: true, key: 'R', description: 'refresh' },
            { ctrl: true, key: 'F5', description: 'hard refresh' },
            { ctrl: true, shift: true, key: 'R', description: 'hard refresh' },
            { alt: true, key: 'ArrowLeft', description: 'back' },
            { alt: true, key: 'ArrowRight', description: 'forward' },
            { ctrl: true, key: 'L', description: 'address bar' },
            { ctrl: true, key: 'T', description: 'new tab' },
            { ctrl: true, key: 'W', description: 'close tab' }
        ];
        
        document.addEventListener('keydown', function(e) {
            if (!window.HH_NAVIGATION_ALLOWED) {
                for (let combo of navigationKeys) {
                    const ctrlMatch = combo.ctrl ? e.ctrlKey : !e.ctrlKey;
                    const shiftMatch = combo.shift ? e.shiftKey : !e.shiftKey;
                    const altMatch = combo.alt ? e.altKey : !e.altKey;
                    const keyMatch = combo.key === e.key;
                    
                    if (ctrlMatch && shiftMatch && altMatch && keyMatch) {
                        console.log(`üö´ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ë–õ–û–ö: –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ ${combo.description} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!`);
                        e.preventDefault();
                        e.stopPropagation();
                        e.stopImmediatePropagation();
                        blockedNavigationAttempts++;
                        return false;
                    }
                }
            }
        }, true);
        
        console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø URL –ó–ê–©–ò–¢–ê (50ms –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
    function setupAggressiveURLProtection() {
        console.log('üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ê–ì–†–ï–°–°–ò–í–ù–û–ô URL –∑–∞—â–∏—Ç—ã (50ms)...');
        
        let currentURL = window.location.href;
        let urlCheckInterval;
        let urlBlockCount = 0;
        
        // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö URL –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        const allowedURLPatterns = [
            /\/search\/vacancy\?/, // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
            /\/vacancy\/\d+$/, // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
            /\/account\//, // –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        ];
        
        // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ URL
        function isURLAllowed(url) {
            if (window.HH_NAVIGATION_ALLOWED) return true;
            
            for (let pattern of allowedURLPatterns) {
                if (pattern.test(url)) return true;
            }
            return false;
        }
        
        // –§—É–Ω–∫—Ü–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π URL
        function forceURLRevert() {
            const newURL = window.location.href;
            if (newURL !== currentURL) {
                console.log(`üö´ URL –ó–ê–©–ò–¢–ê: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç —Å ${newURL} –Ω–∞ ${currentURL}`);
                urlBlockCount++;
                blockedNavigationAttempts++;
                
                // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ URL
                try {
                    window.history.replaceState(null, '', currentURL);
                } catch (e) {}
                
                try {
                    window.history.back();
                } catch (e) {}
                
                try {
                    window.location.replace(currentURL);
                } catch (e) {}
                
                try {
                    window.location.href = currentURL;
                } catch (e) {}
            }
        }
        
        // –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –ß–ê–°–¢–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì URL (50ms)
        urlCheckInterval = setInterval(() => {
            if (window.HH_NAVIGATION_ALLOWED) return;
            
            const newURL = window.location.href;
            
            if (newURL !== currentURL && !isURLAllowed(newURL)) {
                console.log(`üö´ URL –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π URL: ${newURL}`);
                forceURLRevert();
            } else if (newURL !== currentURL && isURLAllowed(newURL)) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π URL –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω
                console.log(`‚úÖ URL –†–ê–ó–†–ï–®–ï–ù: ${newURL}`);
                currentURL = newURL;
            }
        }, 50); // 50ms = 20 –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É!
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–†–û–ì–†–ê–ú–ú–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô URL
        const originalPushState = window.history.pushState;
        const originalReplaceState = window.history.replaceState;
        
        window.history.pushState = function(state, title, url) {
            if (!window.HH_NAVIGATION_ALLOWED && url && !isURLAllowed(url)) {
                console.log('üö´ URL –ë–õ–û–ö: pushState –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', url);
                urlBlockCount++;
                blockedNavigationAttempts++;
                return;
            }
            return originalPushState.apply(this, arguments);
        };
        
        window.history.replaceState = function(state, title, url) {
            if (!window.HH_NAVIGATION_ALLOWED && url && !isURLAllowed(url)) {
                console.log('üö´ URL –ë–õ–û–ö: replaceState –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', url);
                urlBlockCount++;
                blockedNavigationAttempts++;
                return;
            }
            return originalReplaceState.apply(this, arguments);
        };
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê window.location –ò–ó–ú–ï–ù–ï–ù–ò–ô
        const locationDescriptor = Object.getOwnPropertyDescriptor(window, 'location');
        if (locationDescriptor && locationDescriptor.configurable) {
            Object.defineProperty(window, 'location', {
                get: locationDescriptor.get,
                set: function(value) {
                    if (!window.HH_NAVIGATION_ALLOWED && !isURLAllowed(value)) {
                        console.log('üö´ URL –ë–õ–û–ö: window.location –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', value);
                        urlBlockCount++;
                        blockedNavigationAttempts++;
                        return;
                    }
                    return locationDescriptor.set.call(this, value);
                },
                configurable: false
            });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        window.HH_URL_MONITOR_INTERVAL = urlCheckInterval;
        
        console.log('‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è URL –∑–∞—â–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (50ms –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)');
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ URL –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        setInterval(() => {
            if (urlBlockCount > 0) {
                console.log(`üìä URL –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${urlBlockCount} –ø–æ–ø—ã—Ç–æ–∫ —Å–º–µ–Ω—ã URL`);
            }
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
    
    // ========================================
    // –ó–ê–©–ò–¢–ê –û–¢ FORM SUBMISSIONS –ò IFRAME
    // ========================================
    
    function setupFormProtection() {
        console.log('üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–æ—Ä–º –∏ iframe...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        const originalSubmit = HTMLFormElement.prototype.submit;
        const originalCreateElement = document.createElement;
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê FORM SUBMIT
        try {
            Object.defineProperty(HTMLFormElement.prototype, 'submit', {
                value: function() {
                    if (window.HH_NAVIGATION_ALLOWED) {
                        console.log('üîì –†–ê–ó–†–ï–®–ï–ù–û: form.submit() –¥–ª—è —Ñ–æ—Ä–º—ã', this.action || '–±–µ–∑ action');
                        return originalSubmit.call(this);
                    }
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: form.submit() –¥–ª—è —Ñ–æ—Ä–º—ã', this.action || '–±–µ–∑ action');
                    throw new Error('Form submission blocked by HH Script');
                },
                writable: false,
                configurable: false
            });
        } catch (e) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å HTMLFormElement.submit:', e.message);
            HTMLFormElement.prototype.submit = function() {
                if (window.HH_NAVIGATION_ALLOWED) {
                    return originalSubmit.call(this);
                }
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: form.submit()');
                throw new Error('Form submission blocked by HH Script');
            };
        }
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê SUBMIT –°–û–ë–´–¢–ò–ô –ù–ê –î–û–ö–£–ú–ï–ù–¢–ï
        document.addEventListener('submit', function(e) {
            if (window.HH_NAVIGATION_ALLOWED) return;
            
            const form = e.target;
            const action = form.action;
            const method = form.method;
            
            // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ HH.ru
            const isSearchForm = form.closest('[data-qa="vacancy-serp__form"]') || 
                               form.querySelector('[data-qa="serp-field"]') ||
                               action.includes('/search/') ||
                               action.includes('/vacancy');
            
            if (!isSearchForm) {
                e.preventDefault();
                e.stopPropagation();
                e.stopImmediatePropagation();
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: submit —Å–æ–±—ã—Ç–∏—è —Ñ–æ—Ä–º—ã', action, method);
                return false;
            }
        }, true);
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê –°–û–ó–î–ê–ù–ò–Ø IFRAME –ò –û–ü–ê–°–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í
        try {
            document.createElement = function(tagName) {
                const element = originalCreateElement.call(document, tagName);
                
                if (!window.HH_NAVIGATION_ALLOWED) {
                    const dangerousTags = ['iframe', 'frame', 'object', 'embed', 'applet'];
                    
                    if (dangerousTags.includes(tagName.toLowerCase())) {
                        console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞', tagName);
                        
                        // –ë–ª–æ–∫–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É src
                        Object.defineProperty(element, 'src', {
                            set: function(value) {
                                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ src –¥–ª—è', tagName, value);
                                return;
                            },
                            get: function() { return ''; },
                            configurable: false
                        });
                        
                        // –ë–ª–æ–∫–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É data
                        Object.defineProperty(element, 'data', {
                            set: function(value) {
                                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ data –¥–ª—è', tagName, value);
                                return;
                            },
                            get: function() { return ''; },
                            configurable: false
                        });
                    }
                    
                    // –ë–ª–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è refresh
                    if (tagName.toLowerCase() === 'meta') {
                        const originalSetAttribute = element.setAttribute;
                        element.setAttribute = function(name, value) {
                            if (name.toLowerCase() === 'http-equiv' && 
                                value.toLowerCase().includes('refresh')) {
                                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: meta refresh');
                                return;
                            }
                            return originalSetAttribute.call(this, name, value);
                        };
                    }
                }
                
                return element;
            };
        } catch (e) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å createElement:', e.message);
        }
        
        // –ë–õ–û–ö–ò–†–û–í–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø ACTION –£ –§–û–†–ú
        const forms = document.querySelectorAll('form');
        forms.forEach(form => {
            if (form._hhProtected) return;
            
            const originalAction = form.action;
            Object.defineProperty(form, 'action', {
                get: function() { return originalAction; },
                set: function(value) {
                    if (window.HH_NAVIGATION_ALLOWED) {
                        console.log('üîì –†–ê–ó–†–ï–®–ï–ù–û: –∏–∑–º–µ–Ω–µ–Ω–∏–µ form.action', value);
                        return originalAction = value;
                    }
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –∏–∑–º–µ–Ω–µ–Ω–∏–µ form.action', value);
                    return originalAction;
                },
                configurable: false
            });
            
            form._hhProtected = true;
        });
        
        console.log('‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–æ—Ä–º –∏ iframe —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
    function setupClickProtection() {
        console.log('üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –∫–ª–∏–∫–æ–≤...');
        
        // –£–°–ò–õ–ï–ù–ù–´–ô –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–ë–´–¢–ò–ô –ù–ê–í–ò–ì–ê–¶–ò–ò
        const blockNavigationEvent = function(e) {
            if (window.HH_NAVIGATION_ALLOWED) return;
            
            const target = e.target;
            const eventType = e.type;
            
            // –°–¢–†–û–ì–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –í–°–ï–• –°–°–´–õ–û–ö
            if (target && target.nodeType === 1) {
                const link = target.closest && target.closest('a, [href]');
                if (link && (!link.dataset || !link.dataset.hhAllowed)) {
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    console.log('üö´ –°–¢–†–û–ì–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: ' + eventType + ' –ø–æ —Å—Å—ã–ª–∫–µ ' + (link.href || link.getAttribute && link.getAttribute('href') || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'));
                    return false;
                }
            }
            
            // –°–¢–†–û–ì–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –ö–ù–û–ü–û–ö –ò –§–û–†–ú
            if (target && target.nodeType === 1) {
                const isButton = target.type === 'submit' || target.tagName === 'BUTTON' || target.tagName === 'INPUT';
                const isInSearchForm = target.closest && target.closest('[data-qa="vacancy-serp__form"]');
                const isAllowed = target.dataset && target.dataset.hhAllowed;
                
                if (isButton && !isInSearchForm && !isAllowed) {
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    console.log('üö´ –°–¢–†–û–ì–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: ' + eventType + ' –∫–Ω–æ–ø–∫–∏/—Ñ–æ—Ä–º—ã', target.tagName, target.type);
                    return false;
                }
            }
            
            // –ë–õ–û–ö–ò–†–û–í–ö–ê –õ–Æ–ë–´–• –≠–õ–ï–ú–ï–ù–¢–û–í –° ONCLICK –ò–õ–ò HREF (—Ç–æ–ª—å–∫–æ –¥–ª—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
            if (target && target.nodeType === 1) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ DOM —ç–ª–µ–º–µ–Ω—Ç
                const hasOnclick = target.onclick || (target.getAttribute && target.getAttribute('onclick'));
                const hasHref = target.getAttribute && target.getAttribute('href');
                const hasPointerCursor = target.style && target.style.cursor === 'pointer';
                
                if (hasOnclick || hasHref || hasPointerCursor) {
                    const isAllowed = target.dataset && target.dataset.hhAllowed;
                    const isInVacancySerp = target.closest && target.closest('[data-qa*="vacancy-serp"]');
                    
                    if (!isAllowed && !isInVacancySerp) {
                        e.preventDefault();
                        e.stopPropagation();
                        e.stopImmediatePropagation();
                        console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: ' + eventType + ' —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π', target.tagName);
                        return false;
                    }
                }
            }
            
            // –ë–õ–û–ö–ò–†–û–í–ö–ê DRAG&DROP –°–û–ë–´–¢–ò–ô (—Ç–æ–ª—å–∫–æ –¥–ª—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
            if (['dragstart', 'drag', 'dragend'].includes(eventType) && target && target.nodeType === 1) {
                const dragTarget = target.closest && target.closest('a, [href], [onclick]');
                if (dragTarget && (!dragTarget.dataset || !dragTarget.dataset.hhAllowed)) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: drag —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
                    return false;
                }
            }
            
            // –ë–õ–û–ö–ò–†–û–í–ö–ê TOUCH –°–û–ë–´–¢–ò–ô –ù–ê –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–• –≠–õ–ï–ú–ï–ù–¢–ê–• (—Ç–æ–ª—å–∫–æ –¥–ª—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤)  
            if (['touchstart', 'touchend'].includes(eventType) && target && target.nodeType === 1) {
                const touchTarget = target.closest && target.closest('a, button, [onclick], [href]');
                if (touchTarget && (!touchTarget.dataset || !touchTarget.dataset.hhAllowed)) {
                    const isInVacancySerp = touchTarget.closest && touchTarget.closest('[data-qa*="vacancy-serp"]');
                    if (!isInVacancySerp) {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: touch —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
                        return false;
                    }
                }
            }
        };
        
        // –°–ü–ò–°–û–ö –¢–ò–ü–û–í –°–û–ë–´–¢–ò–ô –î–õ–Ø –ë–õ–û–ö–ò–†–û–í–ö–ò (–ë–ï–ó beforeunload/unload/pagehide)
        const eventTypes = [
            'click', 'dblclick', 'mousedown', 'mouseup', 'mousemove',
            'touchstart', 'touchend', 'touchmove', 'touchcancel',
            'submit', 'change', 'input', 'focus', 'blur',
            'dragstart', 'drag', 'dragenter', 'dragover', 'dragleave', 'drop', 'dragend',
            'keydown', 'keyup', 'keypress',
            'contextmenu', 'selectstart'
        ];
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –æ–±–µ —Ñ–∞–∑—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        eventTypes.forEach(type => {
            document.addEventListener(type, blockNavigationEvent, true);  // Capture phase
            document.addEventListener(type, blockNavigationEvent, false); // Bubble phase
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ —á–µ—Ä–µ–∑ MutationObserver
        navigationObserver = new MutationObserver(mutations => {
            if (window.HH_NAVIGATION_ALLOWED) return;
            
            mutations.forEach(mutation => {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === 1) { // Element
                            // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
                            const links = node.tagName === 'A' ? [node] : 
                                         node.querySelectorAll ? node.querySelectorAll('a') : [];
                            
                            links.forEach(link => {
                                if (!link.dataset.hhProtected) {
                                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ listeners
                                    const listenerInfo = {
                                        element: link,
                                        event: 'click',
                                        handler: blockNavigationEvent,
                                        options: true
                                    };
                                    
                                    link.addEventListener('click', blockNavigationEvent, true);
                                    link.dataset.hhProtected = 'true';
                                    addedEventListeners.add(listenerInfo);
                                }
                            });
                        }
                    });
                }
            });
        });
        
        navigationObserver.observe(document.body, {
            childList: true,
            subtree: true
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ window –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        window.hhNavigationObserver = navigationObserver;
        
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∞–≤–∏—à
        document.addEventListener('keydown', function(e) {
            if (window.HH_NAVIGATION_ALLOWED) return;
            
            // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —Å–∫—Ä–∏–ø—Ç–∞
            if (e.ctrlKey && e.altKey && ['s', 'q', 'e'].includes(e.key.toLowerCase())) {
                return;
            }
            
            const blockedKeys = ['F5', 'F1', 'F3', 'F11', 'F12'];
            const blockedCombos = [
                {ctrl: true, key: 'r'},          // –û–±–Ω–æ–≤–∏—Ç—å
                {ctrl: true, key: 'R'},
                {ctrl: true, key: 'l'},          // –ê–¥—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                {ctrl: true, key: 'L'},
                {ctrl: true, key: 'w'},          // –ó–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É
                {ctrl: true, key: 'W'},
                {ctrl: true, key: 't'},          // –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
                {ctrl: true, key: 'T'},
                {ctrl: true, shift: true, key: 't'}, // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫—É
                {ctrl: true, shift: true, key: 'T'},
                {alt: true, key: 'ArrowLeft'},   // –ù–∞–∑–∞–¥
                {alt: true, key: 'ArrowRight'},  // –í–ø–µ—Ä–µ–¥
                {ctrl: true, key: 'h'},          // –ò—Å—Ç–æ—Ä–∏—è
                {ctrl: true, key: 'H'},
                {ctrl: true, key: 'd'},          // –ó–∞–∫–ª–∞–¥–∫–∏
                {ctrl: true, key: 'D'}
            ];
            
            if (blockedKeys.includes(e.key)) {
                e.preventDefault();
                e.stopPropagation();
                e.stopImmediatePropagation();
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –∫–ª–∞–≤–∏—à–∞ ' + e.key);
                return false;
            }
            
            for (const combo of blockedCombos) {
                const ctrlMatch = combo.ctrl ? e.ctrlKey : !e.ctrlKey;
                const altMatch = combo.alt ? e.altKey : !e.altKey;
                const shiftMatch = combo.shift ? e.shiftKey : !e.shiftKey;
                
                if (ctrlMatch && altMatch && shiftMatch && 
                    e.key.toLowerCase() === combo.key.toLowerCase()) {
                    
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –∫–æ–º–±–∏–Ω–∞—Ü–∏—è ' + e.key);
                    return false;
                }
            }
        }, true);
        
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ —Å—Å—ã–ª–∫–∞—Ö
        document.addEventListener('contextmenu', function(e) {
            if (window.HH_NAVIGATION_ALLOWED) return;
            
            const link = e.target.closest('a');
            if (link) {
                e.preventDefault();
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ —Å—Å—ã–ª–∫–µ');
                return false;
            }
        }, true);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ —á–µ—Ä–µ–∑ popstate
        window.addEventListener('popstate', function(e) {
            if (!window.HH_NAVIGATION_ALLOWED) {
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: popstate event');
                e.preventDefault();
                e.stopPropagation();
                history.pushState(null, '', window.location.href);
                return false;
            }
        }, true);
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç hashchange
        window.addEventListener('hashchange', function(e) {
            if (!window.HH_NAVIGATION_ALLOWED) {
                console.log('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: hashchange event');
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        }, true);
        
        console.log('‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–ª–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // ========================================
    // –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–ö–†–ò–ü–¢–ê
    // ========================================
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    let scriptActive = false;
    let processedButtons = new Set();
    let currentPage = 1;
    let totalPages = 1;
    let originalUrl = '';
    
    // –î–ï–¢–ê–õ–¨–ù–´–ï –°–ß–ï–¢–ß–ò–ö–ò –ü–†–û–ì–†–ï–°–°–ê
    let totalResponsesSent = 0;        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤
    let responsesOnCurrentPage = 0;    // –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    let totalButtonsFound = 0;         // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    let totalButtonsProcessed = 0;     // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    let startTime = null;              // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
    let pageStartTime = null;          // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    let activeTimeouts = new Set();         // –ê–∫—Ç–∏–≤–Ω—ã–µ setTimeout ID
    let activeIntervals = new Set();        // –ê–∫—Ç–∏–≤–Ω—ã–µ setInterval ID
    let navigationObserver = null;          // MutationObserver –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    let addedEventListeners = new Set();    // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ event listeners
    let resourcesInitialized = false;       // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    
    // –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    function safeSetTimeout(callback, delay) {
        const timeoutId = setTimeout(() => {
            activeTimeouts.delete(timeoutId);
            callback();
        }, delay);
        activeTimeouts.add(timeoutId);
        return timeoutId;
    }
    
    function safeSetInterval(callback, delay) {
        const intervalId = setInterval(callback, delay);
        activeIntervals.add(intervalId);
        return intervalId;
    }
    
    function safeClearTimeout(timeoutId) {
        if (timeoutId) {
            clearTimeout(timeoutId);
            activeTimeouts.delete(timeoutId);
        }
    }
    
    function safeClearInterval(intervalId) {
        if (intervalId) {
            clearInterval(intervalId);
            activeIntervals.delete(intervalId);
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    const CONFIG = {
        buttonSelector: 'a[data-qa="vacancy-serp__vacancy_response"]',
        labelSelector: '.magritte-button__label___zplmt_6-0-6',
        paginationSelector: 'a[data-qa="pager-page"]',
        buttonDelay: {min: 1000, max: 3000},
        pageDelay: {min: 2000, max: 4000}
    };
    
    // –ö–ª—é—á–∏ localStorage
    const STORAGE_KEYS = {
        state: 'hh_script_state_final',
        script: 'hh_script_code_final'
    };
    
    // –£—Ç–∏–ª–∏—Ç—ã
    function log(msg, type = 'info') {
        const time = new Date().toLocaleTimeString();
        const emoji = type === 'error' ? '‚ùå' : type === 'warn' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
        console.log(`[${time}] ${emoji} ${msg}`);
    }
    
    function randomDelay(range) {
        return Math.floor(Math.random() * (range.max - range.min + 1)) + range.min;
    }
    
    // –†–ê–°–®–ò–†–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê
    function updateStatus(text) {
        const statusEl = document.getElementById('hh-status');
        if (statusEl) {
            statusEl.textContent = text;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            const detailsEl = document.getElementById('hh-status-details');
            if (detailsEl && scriptActive) {
                const elapsed = startTime ? Math.round((Date.now() - startTime) / 1000) : 0;
                const elapsedMin = Math.floor(elapsed / 60);
                const elapsedSec = elapsed % 60;
                
                const timeStr = elapsedMin > 0 ? `${elapsedMin}–º ${elapsedSec}—Å` : `${elapsedSec}—Å`;
                const avgTimePerResponse = totalResponsesSent > 0 ? Math.round(elapsed / totalResponsesSent) : 0;
                
                let progressBar = '';
                if (totalPages > 0) {
                    const progress = Math.round((currentPage / totalPages) * 100);
                    const filled = Math.floor(progress / 5);
                    const empty = 20 - filled;
                    progressBar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty) + ` ${progress}%`;
                }
                
                detailsEl.innerHTML = `
                    <div style="font-size: 9px; line-height: 1.3; margin-top: 5px; color: #00ff41;">
                        ${progressBar ? `<div>üìä ${progressBar}</div>` : ''}
                        <div>‚è∞ –í—Ä–µ–º—è: ${timeStr} | üì§ –û—Ç–∫–ª–∏–∫–æ–≤: ${totalResponsesSent}</div>
                        ${totalResponsesSent > 0 ? `<div>‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: ${avgTimePerResponse}—Å/–æ—Ç–∫–ª–∏–∫</div>` : ''}
                        <div>üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${currentPage}/${totalPages}</div>
                    </div>
                `;
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    function cleanupResources() {
        log('üßπ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤...');
        let cleanedCount = 0;
        
        try {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ timeouts
            for (const timeoutId of activeTimeouts) {
                try {
                    clearTimeout(timeoutId);
                    cleanedCount++;
                } catch (e) {
                    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ timeout ${timeoutId}: ${e.message}`, 'warn');
                }
            }
            activeTimeouts.clear();
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ intervals
            for (const intervalId of activeIntervals) {
                try {
                    clearInterval(intervalId);
                    cleanedCount++;
                } catch (e) {
                    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ interval ${intervalId}: ${e.message}`, 'warn');
                }
            }
            activeIntervals.clear();
            
            // –û—Ç–∫–ª—é—á–∞–µ–º MutationObserver
            if (navigationObserver) {
                try {
                    navigationObserver.disconnect();
                    navigationObserver = null;
                    cleanedCount++;
                    log('‚úÖ MutationObserver –æ—Ç–∫–ª—é—á–µ–Ω');
                } catch (e) {
                    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è MutationObserver: ${e.message}`, 'warn');
                }
            }
            
            // –£–¥–∞–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ event listeners
            for (const listenerInfo of addedEventListeners) {
                try {
                    if (listenerInfo.element && listenerInfo.element.removeEventListener) {
                        listenerInfo.element.removeEventListener(
                            listenerInfo.event, 
                            listenerInfo.handler, 
                            listenerInfo.options
                        );
                        cleanedCount++;
                    }
                } catch (e) {
                    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è event listener: ${e.message}`, 'warn');
                }
            }
            addedEventListeners.clear();
            
            // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏
            if (window.HH_NAVIGATION_WATCHERS) {
                for (const watcherId of window.HH_NAVIGATION_WATCHERS) {
                    try {
                        clearInterval(watcherId);
                        cleanedCount++;
                    } catch (e) {
                        log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ navigation watcher ${watcherId}: ${e.message}`, 'warn');
                    }
                }
                window.HH_NAVIGATION_WATCHERS = [];
            }
            
            // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if (statusUpdateInterval) {
                clearInterval(statusUpdateInterval);
                statusUpdateInterval = null;
                cleanedCount++;
            }
            
            // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            window.hhNavigationObserver = null;
            window.HH_NAVIGATION_ALLOWED = false;
            window.HH_CURRENT_NAVIGATION_ID = null;
            window.HH_LAST_KNOWN_URL = null;
            resourcesInitialized = false;
            
            log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—á–∏—â–µ–Ω–æ: ${cleanedCount} —Ä–µ—Å—É—Ä—Å–æ–≤`);
            
        } catch (e) {
            log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: ${e.message}`, 'error');
        }
    }
    
    // –†–ê–°–®–ò–†–ï–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –° –ü–†–û–ì–†–ï–°–°–û–ú
    function saveState() {
        try {
            const state = {
                active: scriptActive,
                originalUrl: originalUrl,
                currentPage: currentPage,
                totalPages: totalPages,
                processedButtons: Array.from(processedButtons),
                
                // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞  
                totalResponsesSent: totalResponsesSent,
                responsesOnCurrentPage: responsesOnCurrentPage,
                totalButtonsFound: totalButtonsFound,
                totalButtonsProcessed: totalButtonsProcessed,
                startTime: startTime,
                pageStartTime: pageStartTime,
                
                timestamp: Date.now()
            };
            localStorage.setItem(STORAGE_KEYS.state, JSON.stringify(state));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞
            const scriptCode = document.currentScript ? 
                document.currentScript.textContent : 
                'HH Script code';
            localStorage.setItem(STORAGE_KEYS.script, scriptCode);
            
        } catch (e) {
            log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + e.message, 'error');
        }
    }
    
    // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –° –ü–†–û–ì–†–ï–°–°–û–ú
    function loadState() {
        try {
            const saved = localStorage.getItem(STORAGE_KEYS.state);
            if (!saved) return false;
            
            const state = JSON.parse(saved);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
            if (Date.now() - state.timestamp > 3600000) {
                log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º');
                return false;
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            originalUrl = state.originalUrl || window.location.href;
            currentPage = state.currentPage || 1;
            totalPages = state.totalPages || 1;
            processedButtons = new Set(state.processedButtons || []);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            totalResponsesSent = state.totalResponsesSent || 0;
            responsesOnCurrentPage = state.responsesOnCurrentPage || 0; 
            totalButtonsFound = state.totalButtonsFound || 0;
            totalButtonsProcessed = state.totalButtonsProcessed || 0;
            startTime = state.startTime || null;
            pageStartTime = state.pageStartTime || null;
            
            const isValid = state.active && window.location.href.includes('hh.ru');
            
            if (isValid) {
                log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å—Ç—Ä.${currentPage}/${totalPages}, –æ—Ç–∫–ª–∏–∫–æ–≤: ${totalResponsesSent}`);
            }
            
            return isValid;
            
        } catch (e) {
            log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ' + e.message, 'error');
            return false;
        }
    }
    
    function clearState() {
        try {
            localStorage.removeItem(STORAGE_KEYS.state);
            localStorage.removeItem(STORAGE_KEYS.script);
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        }
    }
    
    // –°–¢–†–û–ì–ò–ô –ö–û–ù–¢–†–û–õ–¨ –ù–ê–í–ò–ì–ê–¶–ò–ò –î–õ–Ø –°–ö–†–ò–ü–¢–ê
    function allowNavigation(callback, options = {}) {
        const {
            maxDuration = 5000,    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            reason = 'script',     // –ü—Ä–∏—á–∏–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            allowMultiple = false  // –†–∞–∑—Ä–µ—à–∞—Ç—å –ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        } = options;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
        if (window.HH_NAVIGATION_ALLOWED && !allowMultiple) {
            log('‚ö†Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞, –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤', 'warn');
            return Promise.reject(new Error('Navigation already allowed'));
        }
        
        log('üîì –ù–∞–≤–∏–≥–∞—Ü–∏—è –°–¢–†–û–ì–û —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –¥–ª—è: ' + reason);
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        const navigationId = Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        window.HH_CURRENT_NAVIGATION_ID = navigationId;
        window.HH_NAVIGATION_ALLOWED = true;
        
        let completed = false;
        let timeoutId;
        
        const cleanup = () => {
            if (completed) return;
            completed = true;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Å–µ –µ—â–µ –Ω–∞—à–∞ —Å–µ—Å—Å–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (window.HH_CURRENT_NAVIGATION_ID === navigationId) {
                window.HH_NAVIGATION_ALLOWED = false;
                window.HH_CURRENT_NAVIGATION_ID = null;
                log('üîí –ù–∞–≤–∏–≥–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (ID: ' + navigationId + ')');
            }
            
            if (timeoutId) {
                clearTimeout(timeoutId);
                timeoutId = null;
            }
        };
        
        // –ñ–µ—Å—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
        timeoutId = setTimeout(() => {
            if (!completed) {
                log('‚è∞ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É', 'warn');
                cleanup();
            }
        }, maxDuration);
        
        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º callback
            const result = callback();
            
            // –ï—Å–ª–∏ —ç—Ç–æ Promise, –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if (result && typeof result.then === 'function') {
                return result.finally(cleanup);
            } else {
                // –ï—Å–ª–∏ –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(cleanup, 100);
                return result;
            }
            
        } catch (error) {
            log('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ' + error.message, 'error');
            cleanup();
            throw error;
        }
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function waitForPageReady(timeout = 10000) {
        return new Promise((resolve) => {
            const start = Date.now();
            
            function check() {
                const buttons = document.querySelectorAll(CONFIG.buttonSelector);
                const pagination = document.querySelectorAll(CONFIG.paginationSelector);
                const loaders = document.querySelectorAll('.bloko-loader, [data-qa="bloko-loader"]');
                
                const hasContent = buttons.length > 0 || pagination.length > 0;
                const hasLoaders = Array.from(loaders).some(el => el.offsetParent !== null);
                
                if (hasContent && !hasLoaders) {
                    log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞');
                    resolve(true);
                    return;
                }
                
                if (Date.now() - start > timeout) {
                    log('‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'warn');
                    resolve(false);
                    return;
                }
                
                safeSetTimeout(check, 200);
            }
            
            check();
        });
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    async function analyzePagination() {
        await waitForPageReady();
        
        const pageLinks = document.querySelectorAll(CONFIG.paginationSelector);
        const pageNumbers = [];
        
        pageLinks.forEach(link => {
            const num = parseInt(link.textContent.trim());
            if (!isNaN(num)) pageNumbers.push(num);
        });
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const currentEl = document.querySelector('[data-qa="pager-page"][aria-current="true"]');
        if (currentEl) {
            currentPage = parseInt(currentEl.textContent.trim()) || 1;
        } else {
            const urlPage = new URL(window.location.href).searchParams.get('page');
            currentPage = parseInt(urlPage) || 1;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        totalPages = pageNumbers.length > 0 ? Math.max(...pageNumbers) : 1;
        
        const nextBtn = document.querySelector('[data-qa="pager-next"]');
        if (nextBtn && !nextBtn.hasAttribute('disabled')) {
            totalPages = Math.max(totalPages, currentPage + 1);
        }
        
        log(`üìä –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∏–∑ ${totalPages}`);
        return {currentPage, totalPages};
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    async function goToPage(pageNum) {
        log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pageNum}...`);
        
        try {
            // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const pageLink = Array.from(document.querySelectorAll(CONFIG.paginationSelector))
                .find(link => parseInt(link.textContent.trim()) === pageNum);
            
            if (pageLink) {
                pageLink.dataset.hhAllowed = 'true';
                
                return allowNavigation(() => {
                    pageLink.click();
                    return waitForPageChange();
                }, { reason: 'page_navigation', maxDuration: 10000 });
            }
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
            if (pageNum === currentPage + 1) {
                const nextBtn = document.querySelector('[data-qa="pager-next"]');
                if (nextBtn && !nextBtn.hasAttribute('disabled')) {
                    nextBtn.dataset.hhAllowed = 'true';
                    
                    return allowNavigation(() => {
                        nextBtn.click();
                        return waitForPageChange();
                    }, { reason: 'next_page_button', maxDuration: 10000 });
                }
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL
            const url = new URL(window.location.href);
            url.searchParams.set('page', pageNum);
            
            return allowNavigation(() => {
                window.location.href = url.toString();
                return waitForPageChange();
            }, { reason: 'url_navigation', maxDuration: 15000 });
            
        } catch (e) {
            log('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: ' + e.message, 'error');
            return false;
        }
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function waitForPageChange(timeout = 15000) {
        return new Promise((resolve) => {
            const originalUrl = window.location.href;
            const start = Date.now();
            
            function check() {
                if (window.location.href !== originalUrl) {
                    log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∞');
                    resolve(true);
                    return;
                }
                
                if (Date.now() - start > timeout) {
                    log('‚è∞ –¢–∞–π–º–∞—É—Ç —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'warn');
                    resolve(false);
                    return;
                }
                
                safeSetTimeout(check, 300);
            }
            
            safeSetTimeout(check, 1000);
        });
    }
    
    // –£–°–ò–õ–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù
    async function closeModals() {
        log('üö™ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω...');
        
        // –†–ê–°–®–ò–†–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è
        const selectors = [
            // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã HH.ru
            '[data-qa="modal-close"]',
            '[data-qa="popup-close"]', 
            '[data-qa="response-popup-close-svg"]',
            '[data-qa="response-popup-close"]',
            '[data-qa="relocation-warning-abort"]',
            '[data-qa="relocation-warning-cancel"]',
            '[data-qa="popup-cancel"]',
            '[data-qa="modal-cancel"]',
            
            // CSS –∫–ª–∞—Å—Å—ã
            '.modal-close',
            '.popup-close', 
            '.close-button',
            '.modal-header-close',
            
            // Aria –∞—Ç—Ä–∏–±—É—Ç—ã
            '[aria-label*="–ó–∞–∫—Ä—ã—Ç—å"]',
            '[aria-label*="Close"]',
            '[aria-label*="–û—Ç–º–µ–Ω–∞"]',
            '[aria-label*="Cancel"]',
            '[aria-label*="–û—Ç–º–µ–Ω–∏—Ç—å"]',
            
            // –†–æ–ª–∏ –∏ —Ç–∏–ø—ã
            '[role="button"][aria-label*="–∑–∞–∫—Ä—ã—Ç—å"]',
            'button[data-dismiss="modal"]',
            'button[data-bs-dismiss="modal"]',
            
            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫)
            'button:contains("–û—Ç–º–µ–Ω–∞")',
            'button:contains("–ó–∞–∫—Ä—ã—Ç—å")',
            'button:contains("–û—Ç–º–µ–Ω–∏—Ç—å")',
            'a:contains("–û—Ç–º–µ–Ω–∞")',
            
            // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è HH.ru
            'button.magritte-button___Pubhr_6-0-6[data-qa="relocation-warning-abort"]',
            '.bloko-modal__close',
            '.bloko-popup__close',
            
            // SVG –∏–∫–æ–Ω–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            'svg[data-qa="response-popup-close-svg"]',
            'button:has(svg[data-qa="response-popup-close-svg"])',
            
            // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)
            '.modal .close',
            '.popup .close',
            '[class*="close"]:not([class*="closed"])',
            '[class*="cancel"]'
        ];
        
        let closed = 0;
        let totalFound = 0;
        
        // –≠–¢–ê–ü 1: –ü–æ–∏—Å–∫ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
        for (const selector of selectors) {
            try {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å :contains - –æ–Ω–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º
                if (selector.includes(':contains') || selector.includes(':has')) {
                    continue;
                }
                
                const elements = document.querySelectorAll(selector);
                totalFound += elements.length;
                
                for (const el of elements) {
                    if (await attemptCloseElement(el, selector)) {
                        closed++;
                    }
                }
            } catch (e) {
                log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ ${selector}: ${e.message}`, 'warn');
            }
        }
        
        // –≠–¢–ê–ü 2: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã/–∑–∞–∫—Ä—ã—Ç–∏—è
        try {
            const textSearches = ['–û—Ç–º–µ–Ω–∞', '–ó–∞–∫—Ä—ã—Ç—å', '–û—Ç–º–µ–Ω–∏—Ç—å', 'Cancel', 'Close', '‚úï', '√ó'];
            for (const text of textSearches) {
                const buttons = Array.from(document.querySelectorAll('button, a, span, div'))
                    .filter(el => el.textContent && el.textContent.trim().toLowerCase().includes(text.toLowerCase()));
                
                for (const button of buttons) {
                    if (await attemptCloseElement(button, `—Ç–µ–∫—Å—Ç "${text}"`)) {
                        closed++;
                    }
                }
            }
        } catch (e) {
            log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${e.message}`, 'warn');
        }
        
        // –≠–¢–ê–ü 3: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ - –ø–æ–∏—Å–∫ –º–æ–¥–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –∏—Ö –∑–∞–∫—Ä—ã—Ç–∏–µ
        try {
            const modalContainers = document.querySelectorAll('.modal, .popup, [class*="modal"], [class*="popup"], [class*="dialog"]');
            for (const modal of modalContainers) {
                if (modal.offsetParent !== null) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                    const closeButtons = modal.querySelectorAll('button, a, span, div');
                    for (const btn of closeButtons) {
                        if (btn.offsetParent !== null && (
                            (btn.textContent && (btn.textContent.includes('–û—Ç–º–µ–Ω–∞') || btn.textContent.includes('–ó–∞–∫—Ä—ã—Ç—å'))) ||
                            (btn.className && (btn.className.includes('close') || btn.className.includes('cancel')))
                        )) {
                            if (await attemptCloseElement(btn, '–º–æ–¥–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞')) {
                                closed++;
                                break; // –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                            }
                        }
                    }
                }
            }
        } catch (e) {
            log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: ${e.message}`, 'warn');
        }
        
        // –≠–¢–ê–ü 4: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ Escape –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Escape
            document.dispatchEvent(new KeyboardEvent('keydown', {key: 'Escape', code: 'Escape', bubbles: true}));
            document.dispatchEvent(new KeyboardEvent('keyup', {key: 'Escape', code: 'Escape', bubbles: true}));
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è click –Ω–∞ backdrop
            const backdrops = document.querySelectorAll('.modal-backdrop, .popup-backdrop, [class*="backdrop"]');
            for (const backdrop of backdrops) {
                if (backdrop.offsetParent !== null) {
                    backdrop.click();
                }
            }
        } catch (e) {
            log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: ${e.message}`, 'warn');
        }
        
        if (closed > 0) {
            log(`‚úÖ –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω: ${closed} (–Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${totalFound})`);
        } else if (totalFound > 0) {
            log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${totalFound} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è, –Ω–æ –Ω–∏ –æ–¥–∏–Ω –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å`, 'warn');
        } else {
            log(`‚ÑπÔ∏è –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã`);
        }
    }
    
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ö–†–´–¢–ò–Ø –≠–õ–ï–ú–ï–ù–¢–û–í
    async function attemptCloseElement(el, source) {
        if (!el || el.nodeType !== 1 || typeof el.click !== 'function') {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
        if (el.offsetParent === null || el.style.display === 'none' || 
            el.style.visibility === 'hidden' || el.style.opacity === '0') {
            return false;
        }
        
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
            const elementInfo = (el.dataset && el.dataset.qa) || el.className || el.tagName || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
            log(`üö™ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è [${source}]: ${elementInfo}`);
            
            // –ü–æ–º–µ—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
            if (el.dataset) {
                el.dataset.hhAllowed = 'true';
            }
            
            // –°–∫—Ä–æ–ª–ª–∏–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            if (typeof el.scrollIntoView === 'function') {
                el.scrollIntoView({behavior: 'instant', block: 'center'});
                await new Promise(resolve => setTimeout(resolve, 50));
            }
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ
            if (typeof el.focus === 'function') {
                el.focus();
                await new Promise(resolve => setTimeout(resolve, 50));
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∏–∫–∞
            const originalPosition = {
                offsetParent: el.offsetParent,
                display: el.style.display,
                visibility: el.style.visibility
            };
            
            // –ú–µ—Ç–æ–¥ 1: –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫
            el.click();
            await new Promise(resolve => setTimeout(resolve, 200));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (el.offsetParent === null || el.style.display === 'none') {
                log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç –º–µ—Ç–æ–¥–æ–º click()`);
                return true;
            }
            
            // –ú–µ—Ç–æ–¥ 2: –°–æ–±—ã—Ç–∏–µ click
            el.dispatchEvent(new MouseEvent('click', {bubbles: true, cancelable: true}));
            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (el.offsetParent === null || el.style.display === 'none') {
                log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ click`);
                return true;
            }
            
            // –ú–µ—Ç–æ–¥ 3: Mousedown/mouseup
            el.dispatchEvent(new MouseEvent('mousedown', {bubbles: true, cancelable: true}));
            el.dispatchEvent(new MouseEvent('mouseup', {bubbles: true, cancelable: true}));
            await new Promise(resolve => setTimeout(resolve, 200));
            
            if (el.offsetParent === null || el.style.display === 'none') {
                log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ mouse —Å–æ–±—ã—Ç–∏—è`);
                return true;
            }
            
            log(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è, –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º`, 'warn');
            return false;
            
        } catch (e) {
            log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: ${e.message}`, 'warn');
            return false;
        }
    }
    
    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
    async function clickButton(button) {
        try {
            // –°–∫—Ä–æ–ª–ª–∏–º –∫ –∫–Ω–æ–ø–∫–µ
            button.scrollIntoView({behavior: 'smooth', block: 'center'});
            await new Promise(resolve => setTimeout(resolve, 500));
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π
            button.dataset.hhAllowed = 'true';
            
            // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –ö–õ–ò–ö–ê –î–õ–Ø REACT
            let clicked = false;
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–µ MouseEvent –∏ –¥–∏—Å–ø–∞—Ç—á–∏–º –µ–≥–æ
            try {
                const mouseEvent = new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    view: window,
                    detail: 1,
                    screenX: 0,
                    screenY: 0,
                    clientX: 0,
                    clientY: 0,
                    ctrlKey: false,
                    altKey: false,
                    shiftKey: false,
                    metaKey: false,
                    button: 0,
                    buttons: 1
                });
                
                clicked = button.dispatchEvent(mouseEvent);
                if (clicked) {
                    log('‚úÖ MouseEvent dispatch –≤—ã–ø–æ–ª–Ω–µ–Ω');
                }
            } catch (e) {
                log('MouseEvent dispatch –æ—à–∏–±–∫–∞: ' + e.message, 'warn');
            }
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ò—â–µ–º React –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–µ—Å–ª–∏ MouseEvent –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
            if (!clicked) {
                for (const key in button) {
                    if (key.startsWith('__reactInternalInstance') || 
                        key.startsWith('__reactFiber') ||
                        key.startsWith('__reactProps$') ||
                        key.startsWith('__reactEventHandlers$')) {
                        
                        let fiber = button[key];
                        let attempts = 0;
                        
                        // –ò—â–µ–º onClick –≤ props –∏–ª–∏ memoizedProps
                        while (fiber && attempts < 15) {
                            const props = fiber.memoizedProps || fiber.props || fiber.pendingProps;
                            if (props && props.onClick) {
                                try {
                                    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π SyntheticEvent –æ–±—ä–µ–∫—Ç
                                    const nativeEvent = new MouseEvent('click', {
                                        bubbles: true,
                                        cancelable: true,
                                        view: window
                                    });
                                    
                                    const syntheticEvent = {
                                        nativeEvent: nativeEvent,
                                        currentTarget: button,
                                        target: button,
                                        bubbles: true,
                                        cancelable: true,
                                        defaultPrevented: false,
                                        eventPhase: 2,
                                        isTrusted: false,
                                        timeStamp: Date.now(),
                                        type: 'click',
                                        preventDefault: () => {
                                            syntheticEvent.defaultPrevented = true;
                                            nativeEvent.preventDefault();
                                        },
                                        stopPropagation: () => {
                                            nativeEvent.stopPropagation();
                                        },
                                        stopImmediatePropagation: () => {
                                            nativeEvent.stopImmediatePropagation();
                                        },
                                        isDefaultPrevented: () => syntheticEvent.defaultPrevented,
                                        isPropagationStopped: () => false,
                                        persist: () => {},
                                        isPersistent: () => true
                                    };
                                    
                                    props.onClick(syntheticEvent);
                                    clicked = true;
                                    log('‚úÖ React SyntheticEvent –≤—ã–ø–æ–ª–Ω–µ–Ω');
                                    break;
                                } catch (e) {
                                    log('React SyntheticEvent –æ—à–∏–±–∫–∞: ' + e.message, 'warn');
                                }
                            }
                            
                            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ React fiber tree
                            fiber = fiber.child || fiber.sibling || fiber.return || fiber.alternate;
                            attempts++;
                        }
                        
                        if (clicked) break;
                    }
                }
            }
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–π fallback)
            if (!clicked) {
                button.click();
                log('‚úÖ –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω');
            }
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            await new Promise(resolve => setTimeout(resolve, 1000));
            log('üåê –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
            
            return true;
            
        } catch (e) {
            log('–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: ' + e.message, 'error');
            return false;
        }
    }
    
    // –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–£–©–ï–ô –°–¢–†–ê–ù–ò–¶–´ –° –ü–†–û–ì–†–ï–°–°–û–ú
    async function processCurrentPage() {
        if (!scriptActive) return false;
        
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pageStartTime = Date.now();
        responsesOnCurrentPage = 0;
        
        const elapsed = startTime ? Math.round((Date.now() - startTime) / 1000) : 0;
        log(`üîç === –°–¢–†–ê–ù–ò–¶–ê ${currentPage}/${totalPages} === (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${elapsed}—Å)`);
        
        // –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        const overallProgress = totalPages > 0 ? Math.round((currentPage / totalPages) * 100) : 0;
        updateStatus(`üîÑ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä.${currentPage}/${totalPages} (${overallProgress}%) | –û—Ç–∫–ª–∏–∫–æ–≤: ${totalResponsesSent}`);
        
        await waitForPageReady();
        await closeModals();
        await new Promise(resolve => setTimeout(resolve, randomDelay({min: 500, max: 1500})));
        
        // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const allButtons = document.querySelectorAll(CONFIG.buttonSelector);
        const validButtons = [];
        let alreadyProcessedCount = 0;
        let hiddenCount = 0;
        
        log(`üîç –ê–Ω–∞–ª–∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...`);
        
        for (const btn of allButtons) {
            if (!scriptActive) break;
            
            const label = btn.querySelector(CONFIG.labelSelector);
            const btnId = btn.href + btn.textContent;
            
            if (label && label.textContent.trim() === '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è') {
                if (processedButtons.has(btnId)) {
                    alreadyProcessedCount++;
                } else if (btn.offsetParent === null) {
                    hiddenCount++;
                } else {
                    // –ü–æ–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—É—é –°–†–ê–ó–£ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏
                    btn.dataset.hhAllowed = 'true';
                    validButtons.push({button: btn, id: btnId});
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
        totalButtonsFound += validButtons.length;
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage}:`);
        log(`  üìã –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è": ${allButtons.length}`);
        log(`  ‚úÖ –ù–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${validButtons.length}`);
        log(`  ‚è≠Ô∏è –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ: ${alreadyProcessedCount}`);
        log(`  üëÅÔ∏è‚Äçüó®Ô∏è –°–∫—Ä—ã—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫: ${hiddenCount}`);
        
        updateStatus(`üìã –°—Ç—Ä.${currentPage}: –Ω–∞–π–¥–µ–Ω–æ ${validButtons.length} –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ (–≤—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: ${totalResponsesSent})`);
        
        if (validButtons.length === 0) {
            log(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
            return false;
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        for (let i = validButtons.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [validButtons[i], validButtons[j]] = [validButtons[j], validButtons[i]];
        }
        
        log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤...`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        let processed = 0;
        for (let i = 0; i < validButtons.length && scriptActive; i++) {
            const {button, id} = validButtons[i];
            
            // –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
            const buttonProgress = Math.round(((i + 1) / validButtons.length) * 100);
            const pageProgress = Math.round((currentPage / totalPages) * 100);
            const currentResponseNumber = totalResponsesSent + processed + 1;
            
            updateStatus(`üì§ –û—Ç–∫–ª–∏–∫ ${i + 1}/${validButtons.length} (${buttonProgress}%) —Å—Ç—Ä.${currentPage} | –í—Å–µ–≥–æ: ${currentResponseNumber}`);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try {
                const vacancyTitle = button.closest('[data-qa="vacancy-serp__vacancy"]')?.querySelector('[data-qa="serp-item__title"]')?.textContent?.trim();
                const companyName = button.closest('[data-qa="vacancy-serp__vacancy"]')?.querySelector('[data-qa="vacancy-serp__vacancy-employer"]')?.textContent?.trim();
                
                if (vacancyTitle) {
                    log(`üì§ –û—Ç–∫–ª–∏–∫ ${currentResponseNumber}: "${vacancyTitle}"`);
                    if (companyName) {
                        log(`  üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${companyName}`);
                    }
                } else {
                    log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ ${currentResponseNumber} (–∫–Ω–æ–ø–∫–∞ ${i + 1}/${validButtons.length})`);
                }
            } catch (e) {
                log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ ${currentResponseNumber} (–∫–Ω–æ–ø–∫–∞ ${i + 1}/${validButtons.length})`);
            }
            
            const success = await clickButton(button);
            if (success) {
                processedButtons.add(id);
                processed++;
                responsesOnCurrentPage++;
                totalResponsesSent++;
                totalButtonsProcessed++;
                
                log(`‚úÖ –û—Ç–∫–ª–∏–∫ ${currentResponseNumber} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
                saveState();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                const avgTimePerResponse = processed > 0 ? Math.round((Date.now() - pageStartTime) / processed / 1000) : 0;
                log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${processed}/${validButtons.length} –Ω–∞ —Å—Ç—Ä.${currentPage} | –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTimePerResponse}—Å/–æ—Ç–∫–ª–∏–∫`);
                
                const delay = randomDelay(CONFIG.buttonDelay);
                log(`‚è±Ô∏è –ü–∞—É–∑–∞ ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ç–∫–ª–∏–∫–æ–º...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
                if (i % 2 === 0) { // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—â–µ - –∫–∞–∂–¥—ã–µ 2 –æ—Ç–∫–ª–∏–∫–∞
                    await closeModals();
                }
            } else {
                log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫ ${currentResponseNumber}`, 'warn');
            }
        }
        
        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const pageTime = Math.round((Date.now() - pageStartTime) / 1000);
        const avgTimePerResponse = processed > 0 ? Math.round(pageTime / processed) : 0;
        
        log(`üìä === –°–¢–†–ê–ù–ò–¶–ê ${currentPage} –ó–ê–í–ï–†–®–ï–ù–ê ===`);
        log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: ${processed}/${validButtons.length}`);
        log(`‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageTime}—Å (${avgTimePerResponse}—Å/–æ—Ç–∫–ª–∏–∫)`);
        log(`üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${totalResponsesSent} –æ—Ç–∫–ª–∏–∫–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü ${currentPage}/${totalPages}`);
        
        return processed > 0;
    }
    
    // –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –° –î–ï–¢–ê–õ–¨–ù–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–û–ô
    async function processAllPages() {
        if (!scriptActive) return;
        
        try {
            log(`üéØ === –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –í–°–ï–• –°–¢–†–ê–ù–ò–¶ ===`);
            
            for (let page = currentPage; page <= totalPages && scriptActive; page++) {
                currentPage = page;
                saveState();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                const overallProgress = Math.round((page / totalPages) * 100);
                const elapsed = Math.round((Date.now() - startTime) / 1000);
                const estimatedTotal = totalPages > 0 && page > 1 ? Math.round((elapsed / (page - 1)) * totalPages) : 0;
                const estimatedRemaining = estimatedTotal > elapsed ? estimatedTotal - elapsed : 0;
                
                log(`\nüîÑ === –ü–ï–†–ï–•–û–î –ö –°–¢–†–ê–ù–ò–¶–ï ${page}/${totalPages} ===`);
                log(`üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${overallProgress}% | –í—Ä–µ–º—è: ${elapsed}—Å${estimatedRemaining > 0 ? ` | –û—Å—Ç–∞–ª–æ—Å—å: ~${estimatedRemaining}—Å` : ''}`);
                log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${totalResponsesSent} –æ—Ç–∫–ª–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
                
                if (page > 1) {
                    updateStatus(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä.${page}/${totalPages} (${overallProgress}%) | –û—Ç–∫–ª–∏–∫–æ–≤: ${totalResponsesSent}`);
                    
                    const navigationStart = Date.now();
                    const changed = await goToPage(page);
                    const navigationTime = Date.now() - navigationStart;
                    
                    if (!changed) {
                        log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}`, 'error');
                        continue;
                    }
                    
                    log(`‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${Math.round(navigationTime / 1000)}—Å`);
                    
                    const delay = randomDelay(CONFIG.pageDelay);
                    log(`‚è±Ô∏è –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞: ${delay}–º—Å`);
                    updateStatus(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä.${page}... (–æ–∂–∏–¥–∞–Ω–∏–µ ${Math.round(delay/1000)}—Å)`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                const pageSuccess = await processCurrentPage();
                
                if (!pageSuccess) {
                    log(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page} –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞`);
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                if (page % 5 === 0 || page === totalPages) {
                    const avgResponsesPerPage = page > 0 ? Math.round(totalResponsesSent / page * 10) / 10 : 0;
                    const avgTimePerPage = page > 1 ? Math.round(elapsed / (page - currentPage + 1)) : 0;
                    
                    log(`\nüìä === –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===`);
                    log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${page}/${totalPages}`);
                    log(`üì§ –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: ${totalResponsesSent}`);
                    log(`üìà –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${avgResponsesPerPage}`);
                    log(`‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${avgTimePerPage}—Å`);
                    log(`üéØ –ö–Ω–æ–ø–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: ${totalButtonsFound} | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalButtonsProcessed}`);
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                if (page < totalPages && scriptActive) {
                    const delay = randomDelay(CONFIG.pageDelay);
                    const nextPage = page + 1;
                    
                    log(`‚è∏Ô∏è –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${nextPage}: ${delay}–º—Å`);
                    updateStatus(`‚è∏Ô∏è –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å—Ç—Ä.${nextPage}... (${Math.round(delay/1000)}—Å) | –û—Ç–∫–ª–∏–∫–æ–≤: ${totalResponsesSent}`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
            
            // –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
            if (scriptActive) {
                const totalTime = Math.round((Date.now() - startTime) / 1000);
                const avgTimePerResponse = totalResponsesSent > 0 ? Math.round(totalTime / totalResponsesSent) : 0;
                const avgTimePerPage = totalPages > 0 ? Math.round(totalTime / totalPages) : 0;
                const avgResponsesPerPage = totalPages > 0 ? Math.round(totalResponsesSent / totalPages * 10) / 10 : 0;
                
                log(`\nüéâ === –í–°–ï –°–¢–†–ê–ù–ò–¶–´ –û–ë–†–ê–ë–û–¢–ê–ù–´ ===`);
                log(`‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
                log(`  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalPages}`);
                log(`  üì§ –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalResponsesSent}`);
                log(`  üéØ –ö–Ω–æ–ø–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: ${totalButtonsFound}`);
                log(`  ‚úÖ –ö–Ω–æ–ø–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalButtonsProcessed}`);
                log(`  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${totalTime}—Å (${Math.round(totalTime/60)}–º–∏–Ω)`);
                log(`  üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:`);
                log(`    - ${avgResponsesPerPage} –æ—Ç–∫–ª–∏–∫–æ–≤/—Å—Ç—Ä–∞–Ω–∏—Ü—É`);
                log(`    - ${avgTimePerResponse}—Å/–æ—Ç–∫–ª–∏–∫`);
                log(`    - ${avgTimePerPage}—Å/—Å—Ç—Ä–∞–Ω–∏—Ü—É`);
                log(`  üïí –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date().toLocaleTimeString()}`);
                
                updateStatus(`üéâ –ó–ê–í–ï–†–®–ï–ù–û! ${totalResponsesSent} –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞ ${Math.round(totalTime/60)}–º–∏–Ω | –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${avgResponsesPerPage}/—Å—Ç—Ä`);
                
                setTimeout(() => stopScript(), 5000);
            }
            
        } catch (e) {
            const elapsed = Math.round((Date.now() - startTime) / 1000);
            log(`‚ùå === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ===`, 'error');
            log(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`, 'error');
            log(`üìä –ù–∞ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏: ${totalResponsesSent} –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞ ${elapsed}—Å`, 'error');
            updateStatus(`‚ùå –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${totalResponsesSent} –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–æ —Å–±–æ—è`);
            stopScript();
        }
    }
    
    // ========================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–†–ò–ü–¢–û–ú
    // ========================================
    
    async function startScript() {
        if (scriptActive) {
            log('‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω', 'warn');
            return;
        }
        
        scriptActive = true;
        originalUrl = window.location.href;
        processedButtons.clear();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        totalResponsesSent = 0;
        responsesOnCurrentPage = 0;
        totalButtonsFound = 0;
        totalButtonsProcessed = 0;
        startTime = Date.now();
        pageStartTime = null;
        
        log('üöÄ === –ó–ê–ü–£–°–ö HH SCRIPT - ULTRA SECURE VERSION ===');
        log(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleTimeString()}`);
        updateStatus('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        startStatusUpdates();
        
        try {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            const pagination = await analyzePagination();
            currentPage = pagination.currentPage;
            totalPages = pagination.totalPages;
            
            saveState();
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π —Ä–∞–±–æ—Ç–µ
            log(`üìä === –ü–õ–ê–ù –†–ê–ë–û–¢–´ ===`);
            log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${totalPages}`);
            log(`üîó –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${currentPage}`);
            log(`üìç –°—Ç–∞—Ä—Ç–æ–≤—ã–π URL: ${originalUrl}`);
            
            updateStatus(`üìã –ü–ª–∞–Ω: ${totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü | –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É...`);
            
            await new Promise(resolve => setTimeout(resolve, randomDelay({min: 1000, max: 2000})));
            await processAllPages();
            
        } catch (e) {
            log('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ' + e.message, 'error');
            stopScript();
        }
    }
    
    function stopScript() {
        if (!scriptActive) return;
        
        scriptActive = false;
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        const elapsed = startTime ? Math.round((Date.now() - startTime) / 1000) : 0;
        const elapsedMin = Math.floor(elapsed / 60);
        const elapsedSec = elapsed % 60;
        const timeStr = elapsedMin > 0 ? `${elapsedMin}–º ${elapsedSec}—Å` : `${elapsedSec}—Å`;
        
        log('üõë === HH SCRIPT –û–°–¢–ê–ù–û–í–õ–ï–ù ===');
        log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        log(`  üì§ –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: ${totalResponsesSent}`);
        log(`  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${currentPage - 1}/${totalPages}`);
        log(`  ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${timeStr}`);
        log(`  üéØ –ö–Ω–æ–ø–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: ${totalButtonsFound}`);
        log(`  ‚úÖ –ö–Ω–æ–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalButtonsProcessed}`);
        
        updateStatus(`üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω | ${totalResponsesSent} –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞ ${timeStr}`);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        totalResponsesSent = 0;
        responsesOnCurrentPage = 0;
        totalButtonsFound = 0;
        totalButtonsProcessed = 0;
        startTime = null;
        pageStartTime = null;
        
        // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
        cleanupResources();
        clearState();
        
        // –û—á–∏—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        const detailsEl = document.getElementById('hh-status-details');
        if (detailsEl) {
            detailsEl.innerHTML = 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã';
        }
    }
    
    // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê
    let statusUpdateInterval = null;
    
    function startStatusUpdates() {
        if (statusUpdateInterval) {
            clearInterval(statusUpdateInterval);
        }
        
        statusUpdateInterval = setInterval(() => {
            if (!scriptActive) {
                if (statusUpdateInterval) {
                    clearInterval(statusUpdateInterval);
                    statusUpdateInterval = null;
                }
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            const detailsEl = document.getElementById('hh-status-details');
            if (detailsEl) {
                const elapsed = startTime ? Math.round((Date.now() - startTime) / 1000) : 0;
                const elapsedMin = Math.floor(elapsed / 60);
                const elapsedSec = elapsed % 60;
                const timeStr = elapsedMin > 0 ? `${elapsedMin}–º ${elapsedSec}—Å` : `${elapsedSec}—Å`;
                
                const avgTimePerResponse = totalResponsesSent > 0 ? Math.round(elapsed / totalResponsesSent) : 0;
                const estimatedRemaining = totalPages > 0 && currentPage > 1 ? 
                    Math.round((elapsed / (currentPage - 1)) * (totalPages - currentPage + 1)) : 0;
                
                let progressBar = '';
                if (totalPages > 0) {
                    const progress = Math.round((currentPage / totalPages) * 100);
                    const filled = Math.floor(progress / 5);
                    const empty = 20 - filled;
                    progressBar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty) + ` ${progress}%`;
                }
                
                detailsEl.innerHTML = `
                    <div style="font-size: 9px; line-height: 1.3; color: #00ff41;">
                        ${progressBar ? `<div>üìä ${progressBar}</div>` : ''}
                        <div>‚è∞ ${timeStr} | üì§ ${totalResponsesSent} –æ—Ç–∫–ª–∏–∫–æ–≤ ${estimatedRemaining > 0 ? `| ‚è≥ ~${Math.round(estimatedRemaining/60)}–º` : ''}</div>
                        ${totalResponsesSent > 0 ? `<div>‚ö° ${avgTimePerResponse}—Å/–æ—Ç–∫–ª–∏–∫ | üéØ ${totalButtonsFound} –Ω–∞–π–¥–µ–Ω–æ | ‚úÖ ${totalButtonsProcessed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>` : ''}
                        <div>üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}/${totalPages} ${responsesOnCurrentPage > 0 ? `(+${responsesOnCurrentPage} –Ω–∞ —ç—Ç–æ–π)` : ''}</div>
                        <div style="color: #ff4444; font-weight: bold;">üõ°Ô∏è –°–ï–ù–¨–û–† –ó–ê–©–ò–¢–ê: ${blockedNavigationAttempts} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
                        <div style="color: #ff6644; font-size: 8px;">üåê –°–µ—Ç—å: ${networkRequestsBlocked} | üè† DOM: ${domModificationsBlocked} | üì° URL: –∞–∫—Ç–∏–≤–µ–Ω</div>
                    </div>
                `;
            }
        }, 2000);
    }
    
    function emergencyStop() {
        log('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê');
        scriptActive = false;
        window.HH_NAVIGATION_ALLOWED = true; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if (statusUpdateInterval) {
            clearInterval(statusUpdateInterval);
            statusUpdateInterval = null;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        totalResponsesSent = 0;
        responsesOnCurrentPage = 0;
        totalButtonsFound = 0;
        totalButtonsProcessed = 0;
        startTime = null;
        pageStartTime = null;
        
        // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        cleanupResources();
        clearState();
        updateStatus('üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –û—á–∏—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        const detailsEl = document.getElementById('hh-status-details');
        if (detailsEl) {
            detailsEl.innerHTML = 'üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã';
        }
    }
    
    // ========================================
    // –ò–ù–¢–ï–†–§–ï–ô–°
    // ========================================
    
    function createInterface() {
        if (document.getElementById('hh-panel')) return;
        
        const panel = document.createElement('div');
        panel.id = 'hh-panel';
        panel.innerHTML = `
            <div style="
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #1a1a1a 0%, #000 100%);
                color: #00ff41;
                border: 2px solid #00ff41;
                padding: 20px;
                border-radius: 12px;
                font-family: 'Courier New', monospace;
                font-size: 12px;
                z-index: 999999;
                box-shadow: 0 0 30px rgba(0,255,65,0.5);
                min-width: 300px;
                backdrop-filter: blur(10px);
            ">
                <div style="text-align: center; margin-bottom: 15px; font-weight: bold; font-size: 14px; text-shadow: 0 0 10px #00ff41;">
                    üíÄ HH SCRIPT ULTRA SECURE üíÄ
                </div>
                <div style="text-align: center; margin-bottom: 10px; font-size: 10px; color: #ff4444;">
                    üõ°Ô∏è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –ù–ê–í–ò–ì–ê–¶–ò–ò üõ°Ô∏è
                </div>
                <div style="text-align: center; margin-bottom: 15px;">
                    <button onclick="window.hhStart()" style="
                        background: linear-gradient(45deg, #00ff41, #00cc33);
                        color: #000;
                        border: none;
                        padding: 12px 20px;
                        margin: 5px;
                        cursor: pointer;
                        font-weight: bold;
                        border-radius: 6px;
                        font-size: 12px;
                        box-shadow: 0 0 15px rgba(0,255,65,0.4);
                        transition: all 0.3s;
                    " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                        üöÄ –ó–ê–ü–£–°–ö
                    </button>
                    <br>
                    <button onclick="window.hhStop()" style="
                        background: linear-gradient(45deg, #666, #333);
                        color: #fff;
                        border: none;
                        padding: 8px 15px;
                        margin: 3px;
                        cursor: pointer;
                        font-weight: bold;
                        border-radius: 4px;
                        font-size: 10px;
                    ">
                        ‚è∏Ô∏è –°–¢–û–ü
                    </button>
                    <button onclick="window.hhEmergencyStop()" style="
                        background: linear-gradient(45deg, #ff4444, #cc0000);
                        color: #fff;
                        border: none;
                        padding: 8px 15px;
                        margin: 3px;
                        cursor: pointer;
                        font-weight: bold;
                        border-radius: 4px;
                        font-size: 10px;
                        box-shadow: 0 0 10px rgba(255,68,68,0.4);
                    ">
                        üö® –≠–ö–°–¢–†–ï–ù–ù–û
                    </button>
                </div>
                <div id="hh-status" style="
                    text-align: center;
                    border: 1px solid #00ff41;
                    padding: 10px;
                    border-radius: 6px;
                    background: rgba(0,255,65,0.1);
                    min-height: 20px;
                    font-size: 11px;
                    margin-bottom: 5px;
                ">
                    –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É
                </div>
                <div id="hh-status-details" style="
                    text-align: center;
                    border: 1px solid #00ff41;
                    border-top: none;
                    padding: 8px;
                    border-radius: 0 0 6px 6px;
                    background: rgba(0,255,65,0.05);
                    font-size: 9px;
                    margin-bottom: 10px;
                    color: #00dd33;
                    line-height: 1.3;
                ">
                    üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                </div>
                <div style="font-size: 9px; text-align: center; opacity: 0.8; line-height: 1.4;">
                    <div>‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:</div>
                    <div>Ctrl+Alt+S - –∑–∞–ø—É—Å–∫</div>
                    <div>Ctrl+Alt+Q - —Å—Ç–æ–ø</div>
                    <div style="color: #ff4444;">Ctrl+Alt+E - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞</div>
                    <div style="margin-top: 8px; padding-top: 8px; border-top: 1px solid #00ff41; opacity: 0.6;">
                        ULTRA SECURE VERSION<br>
                        üõ°Ô∏è –î–≤–æ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ + –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ<br>
                        üö´ –ë–ª–æ–∫–∏—Ä—É–µ—Ç –í–°–ï —Å–ø–æ—Å–æ–±—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(panel);
    }
    
    // ========================================
    // –ê–í–¢–û–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï
    // ========================================
    
    function setupAutoRecovery() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        try {
            const scriptCode = `
// HH Script Auto Recovery
(function() {
    console.log('üîÑ HH Script: –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
    if (window.hhStart) {
        console.log('‚úÖ –°–∫—Ä–∏–ø—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥
    const savedCode = localStorage.getItem('${STORAGE_KEYS.script}');
    const savedState = localStorage.getItem('${STORAGE_KEYS.state}');
    
    if (savedCode && savedState) {
        try {
            const state = JSON.parse(savedState);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
            if (state.active && Date.now() - state.timestamp < 3600000) {
                console.log('üöÄ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–∑ localStorage...');
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥
                const script = document.createElement('script');
                script.textContent = savedCode;
                document.head.appendChild(script);
                
                // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    if (window.hhStart && window.location.href.includes('hh.ru')) {
                        console.log('üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞');
                        window.hhStart();
                    }
                }, 3000);
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', e);
        }
    }
})();`;
            
            localStorage.setItem('hh_recovery_script', scriptCode);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ head
            const recoveryScript = document.createElement('script');
            recoveryScript.textContent = localStorage.getItem('hh_recovery_script');
            document.head.appendChild(recoveryScript);
            
        } catch (e) {
            log('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ' + e.message, 'error');
        }
    }
    
    function autoRecover() {
        if (!window.location.href.includes('hh.ru')) return;
        
        const restored = loadState();
        if (restored) {
            log('üîÑ –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            updateStatus('–ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...');
            
            let countdown = 5;
            const timer = safeSetInterval(() => {
                updateStatus(`–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ${countdown}—Å...`);
                countdown--;
                
                if (countdown <= 0) {
                    safeClearInterval(timer);
                    if (!scriptActive) {
                        log('üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
                        startScript();
                    }
                }
            }, 1000);
        }
    }
    
    // ========================================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –°–û–ë–´–¢–ò–Ø
    // ========================================
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    window.hhStart = startScript;
    window.hhStop = stopScript;
    window.hhEmergencyStop = emergencyStop;
    
    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.altKey) {
            switch (e.key.toLowerCase()) {
                case 's':
                    e.preventDefault();
                    e.stopPropagation();
                    log('üéÆ –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: –ó–∞–ø—É—Å–∫');
                    startScript();
                    break;
                case 'q':
                    e.preventDefault();
                    e.stopPropagation();
                    log('üéÆ –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: –û—Å—Ç–∞–Ω–æ–≤–∫–∞');
                    stopScript();
                    break;
                case 'e':
                    e.preventDefault();
                    e.stopPropagation();
                    log('üéÆ –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞');
                    emergencyStop();
                    break;
            }
        }
    }, true);
    
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', function() {
        if (document.hidden && scriptActive) {
            log('üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            saveState();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    window.addEventListener('error', function(e) {
        log('üêõ JS –æ—à–∏–±–∫–∞: ' + e.message, 'error');
        if (scriptActive) saveState();
    });
    
    window.addEventListener('unhandledrejection', function(e) {
        log('üêõ Promise –æ—à–∏–±–∫–∞: ' + e.reason, 'error');
        if (scriptActive) saveState();
        e.preventDefault();
    });
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function initialize() {
        log('üîß HH Script ULTRA SECURE - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        if (!window.Promise || !window.fetch || !document.querySelector) {
            log('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
            alert('‚ö†Ô∏è HH Script: –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage
        try {
            localStorage.setItem('test', 'test');
            localStorage.removeItem('test');
        } catch (e) {
            log('‚ö†Ô∏è localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ', 'warn');
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—ã
        setupNavigationProtection();
        setupNetworkProtection();
        setupDOMProtection();
        setupGlobalEventBlocking();
        setupAggressiveURLProtection();
        setupFormProtection();
        setupClickProtection();
        setupAutoRecovery();
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        createInterface();
        
        log('‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ULTRA SECURE VERSION:');
        log('  üõ°Ô∏è –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
        log('  üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ + —Å—Ç—Ä–æ–≥–∞—è —Å–æ–±—ã—Ç–∏–π–Ω–∞—è –∑–∞—â–∏—Ç–∞');
        log('  üö´ 100% –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–æ–≤ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        log('  ‚ö° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π URL-–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å —Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º (5 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)');
        log('  üöß –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∞—Å–Ω—ã—Ö DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        log('  üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ localStorage');
        log('  üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
        log('  üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
        log('  ‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ª—é–±—ã–º —Å–±–æ—è–º –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º –±—Ä–∞—É–∑–µ—Ä–∞');
        
        log('‚úÖ HH Script ULTRA SECURE –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        updateStatus('–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É');
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(autoRecover, 2000);
    }
    
    // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        setTimeout(initialize, 100);
    }
    
})();