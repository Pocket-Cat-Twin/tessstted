// –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏
const { spawn } = require('child_process');
const path = require('path');

async function testAPIServer() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...');
  console.log('üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ "overall_verification_status –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const env = {
    ...process.env,
    DATABASE_URL: 'postgresql://postgres@/var/run/postgresql/yuyu_lolita',
    API_PORT: '3001',
    NODE_ENV: 'development'
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
  const apiProcess = spawn('npm', ['run', 'dev'], {
    cwd: path.join(__dirname, 'apps', 'api'),
    env: env,
    stdio: ['pipe', 'pipe', 'pipe']
  });

  console.log('‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä...');
  
  let output = '';
  let hasError = false;
  let hasSuccess = false;

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞
  apiProcess.stdout.on('data', (data) => {
    const text = data.toString();
    output += text;
    console.log('üìÑ STDOUT:', text.trim());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
    if (text.includes('running on http://localhost:3001') || 
        text.includes('Server started') ||
        text.includes('listening on')) {
      hasSuccess = true;
      console.log('‚úÖ API —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    }
  });

  apiProcess.stderr.on('data', (data) => {
    const text = data.toString();
    output += text;
    console.log('üìÑ STDERR:', text.trim());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É
    if (text.includes('overall_verification_status') && text.includes('–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
      hasError = true;
      console.log('‚ùå –ò–°–•–û–î–ù–ê–Ø –û–®–ò–ë–ö–ê –í–°–ï –ï–©–ï –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢!');
    } else if (text.includes('ERROR') || text.includes('Error')) {
      console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:', text);
    }
  });

  // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
  await new Promise(resolve => setTimeout(resolve, 10000));

  // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  apiProcess.kill('SIGTERM');

  console.log('\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:');
  console.log('===============================================');
  
  if (hasError) {
    console.log('‚ùå –û–®–ò–ë–ö–ê: –ò—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å overall_verification_status –≤—Å–µ –µ—â–µ –µ—Å—Ç—å');
    return false;
  } else if (hasSuccess) {
    console.log('‚úÖ –£–°–ü–ï–•: API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ —Å overall_verification_status');
    console.log('‚úÖ –ò–°–•–û–î–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–ê!');
    return true;
  } else {
    console.log('‚ö†Ô∏è –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏ –Ω–µ –≤–∏–¥–Ω–æ');
    console.log('üìù –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥:');
    console.log(output);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAPIServer().then(success => {
  if (success) {
    console.log('\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–û! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    process.exit(0);
  } else {
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    process.exit(1);
  }
}).catch(error => {
  console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  process.exit(1);
});