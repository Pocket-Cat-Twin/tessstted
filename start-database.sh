#!/bin/bash

# ============================================================================
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö POSTGRESQL –î–õ–Ø API 
# ============================================================================
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç PostgreSQL –∏ –≥–æ—Ç–æ–≤–∏—Ç –≤—Å–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã API
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./start-database.sh
# ============================================================================

set -e

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

echo "üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö POSTGRESQL –î–õ–Ø API"
echo "============================================="
echo ""

# Configuration
CONTAINER_NAME="yuyu-postgres"
DB_USER="postgres"
DB_PASS="postgres"  
DB_NAME="yuyu_lolita"
DB_PORT="5432"

log_info "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
log_info "  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: $CONTAINER_NAME"
log_info "  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $DB_USER"
log_info "  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $DB_NAME"
log_info "  –ü–æ—Ä—Ç: $DB_PORT"
echo ""

# Step 1: Check if container already exists
log_info "–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."

if docker ps -a | grep -q "$CONTAINER_NAME"; then
    CONTAINER_STATE=$(docker inspect -f '{{.State.Status}}' "$CONTAINER_NAME" 2>/dev/null || echo "not_found")
    
    if [ "$CONTAINER_STATE" = "running" ]; then
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!"
    elif [ "$CONTAINER_STATE" = "exited" ]; then
        log_info "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º..."
        docker start "$CONTAINER_NAME"
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
    else
        log_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: $CONTAINER_STATE"
        log_info "–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π..."
        docker rm -f "$CONTAINER_NAME" 2>/dev/null || true
        log_info "–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
        docker run --name "$CONTAINER_NAME" \
            -e POSTGRES_USER="$DB_USER" \
            -e POSTGRES_PASSWORD="$DB_PASS" \
            -e POSTGRES_DB="$DB_NAME" \
            -p "$DB_PORT:5432" \
            -d postgres:16
        log_success "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
    fi
else
    log_info "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π..."
    
    # Check if port is free
    if netstat -tlnp 2>/dev/null | grep -q ":$DB_PORT "; then
        log_error "–ü–æ—Ä—Ç $DB_PORT —É–∂–µ –∑–∞–Ω—è—Ç!"
        log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É–∂–±—ã –Ω–∞ –ø–æ—Ä—Ç—É $DB_PORT..."
        
        # Try to stop existing PostgreSQL service
        sudo service postgresql stop 2>/dev/null || true
        sleep 2
        
        # Check again
        if netstat -tlnp 2>/dev/null | grep -q ":$DB_PORT "; then
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç $DB_PORT"
            log_error "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–ª—É–∂–±—É –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç"
            exit 1
        fi
    fi
    
    log_info "–°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
    docker run --name "$CONTAINER_NAME" \
        -e POSTGRES_USER="$DB_USER" \
        -e POSTGRES_PASSWORD="$DB_PASS" \
        -e POSTGRES_DB="$DB_NAME" \
        -p "$DB_PORT:5432" \
        -d postgres:16
    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
fi

# Step 2: Wait for PostgreSQL to be ready
log_info "–®–∞–≥ 2: –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."

CONNECTION_STRING="postgresql://$DB_USER:$DB_PASS@localhost:$DB_PORT/$DB_NAME"
MAX_ATTEMPTS=30
ATTEMPT=0

while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
    ATTEMPT=$((ATTEMPT + 1))
    
    if PGPASSWORD="$DB_PASS" psql "$CONNECTION_STRING" -c "SELECT 1;" >/dev/null 2>&1; then
        log_success "PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        break
    else
        if [ $ATTEMPT -eq 1 ]; then
            log_info "–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ PostgreSQL..."
        fi
        printf "."
        sleep 1
    fi
    
    if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
        echo ""
        log_error "PostgreSQL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $MAX_ATTEMPTS –ø–æ–ø—ã—Ç–æ–∫"
        log_error "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: docker logs $CONTAINER_NAME"
        exit 1
    fi
done

if [ $ATTEMPT -gt 1 ]; then
    echo ""
fi

# Step 3: Check if migrations need to be applied
log_info "–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

TABLE_COUNT=$(PGPASSWORD="$DB_PASS" psql "$CONNECTION_STRING" -tAc "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null || echo "0")

if [ "$TABLE_COUNT" -lt 20 ]; then
    log_warning "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞—è ($TABLE_COUNT —Ç–∞–±–ª–∏—Ü)"
    log_info "–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
    
    MIGRATION_FILE="packages/db/migrations/0000_consolidated_schema.sql"
    
    if [ -f "$MIGRATION_FILE" ]; then
        PGPASSWORD="$DB_PASS" psql "$CONNECTION_STRING" -f "$MIGRATION_FILE" >/dev/null 2>&1
        
        # Check result
        NEW_TABLE_COUNT=$(PGPASSWORD="$DB_PASS" psql "$CONNECTION_STRING" -tAc "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null || echo "0")
        
        if [ "$NEW_TABLE_COUNT" -gt 20 ]; then
            log_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ ($NEW_TABLE_COUNT —Ç–∞–±–ª–∏—Ü —Å–æ–∑–¥–∞–Ω–æ)"
        else
            log_error "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            exit 1
        fi
    else
        log_error "–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: $MIGRATION_FILE"
        exit 1
    fi
else
    log_success "–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ ($TABLE_COUNT —Ç–∞–±–ª–∏—Ü)"
fi

# Step 4: Verify connection and key tables
log_info "–®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."

# Test config table (—á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç API)
if PGPASSWORD="$DB_PASS" psql "$CONNECTION_STRING" -c "SELECT COUNT(*) FROM config;" >/dev/null 2>&1; then
    log_success "–¢–∞–±–ª–∏—Ü–∞ config –¥–æ—Å—Ç—É–ø–Ω–∞ ‚úÖ"
else
    log_error "–¢–∞–±–ª–∏—Ü–∞ config –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚ùå"
    exit 1
fi

# Test users table
if PGPASSWORD="$DB_PASS" psql "$CONNECTION_STRING" -c "SELECT COUNT(*) FROM users;" >/dev/null 2>&1; then
    log_success "–¢–∞–±–ª–∏—Ü–∞ users –¥–æ—Å—Ç—É–ø–Ω–∞ ‚úÖ"
else
    log_error "–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚ùå"
    exit 1
fi

echo ""
log_success "üéâ POSTGRESQL –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!"
echo "============================================"
echo ""
log_success "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: $CONTAINER_NAME –∑–∞–ø—É—â–µ–Ω"
log_success "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $DB_NAME —Å–æ–∑–¥–∞–Ω–∞"
log_success "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $DB_USER —Å –ø–∞—Ä–æ–ª–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
log_success "‚úÖ –°—Ö–µ–º–∞: –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã"
log_success "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo ""
log_info "üîó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
echo "   DATABASE_URL=$CONNECTION_STRING"
echo ""
log_info "üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:"
echo "   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä - –æ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
echo "   2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL"
echo "   3. –ü–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
echo ""
log_info "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º:"
echo "   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker stop $CONTAINER_NAME"
echo "   ‚Ä¢ –ó–∞–ø—É—Å–∫: docker start $CONTAINER_NAME"  
echo "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker restart $CONTAINER_NAME"
echo "   ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ: docker rm -f $CONTAINER_NAME"
echo ""
log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:"
echo "   ‚Ä¢ –°—Ç–∞—Ç—É—Å: docker ps | grep $CONTAINER_NAME"
echo "   ‚Ä¢ –õ–æ–≥–∏: docker logs $CONTAINER_NAME"
echo "   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: node test-api-connection.js"
echo ""

# Final test
log_info "üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
if PGPASSWORD="$DB_PASS" psql "$CONNECTION_STRING" -c "SELECT 'API connection test PASSED!' as result;" 2>/dev/null; then
    echo ""
    log_success "üíØ –£–°–ü–ï–•! API –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –†–ê–ë–û–¢–ê–ï–¢!"
else
    log_error "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ—Å—Ç–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    exit 1
fi