#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö —á–µ—Ä–µ–∑ Yandex Vision OCR API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç API-–∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import base64
import json
import os
import sys
import urllib.request
from pathlib import Path

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =============================================================================

API_KEY = "your_api_key_here"
OCR_URL = "https://ocr.api.cloud.yandex.net/ocr/v1/recognizeText"

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
SUPPORTED_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.pdf']
MIME_TYPES = {
    '.jpg': 'JPEG',
    '.jpeg': 'JPEG', 
    '.png': 'PNG',
    '.pdf': 'PDF'
}

# –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
request_count = 0

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def encode_image(file_path):
    """–ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Base64"""
    try:
        with open(file_path, 'rb') as f:
            return base64.b64encode(f.read()).decode('utf-8')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None

def get_mime_type(file_path):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MIME-—Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞"""
    ext = Path(file_path).suffix.lower()
    return MIME_TYPES.get(ext, 'JPEG')

def send_ocr_request(file_path):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ Yandex Vision OCR API"""
    global request_count
    request_count += 1
    
    print(f"\nüì§ –ó–∞–ø—Ä–æ—Å #{request_count}: {Path(file_path).name}")
    
    # –ö–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
    encoded_content = encode_image(file_path)
    if not encoded_content:
        return None
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = {
        "mimeType": get_mime_type(file_path),
        "languageCodes": ["en"],
        "model": "page",
        "content": encoded_content
    }
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    json_data = json.dumps(data).encode('utf-8')
    request = urllib.request.Request(
        OCR_URL,
        data=json_data,
        headers={
            "Content-Type": "application/json",
            "Authorization": f"Api-Key {API_KEY}"
        }
    )
    
    try:
        print("üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        with urllib.request.urlopen(request) as response:
            if response.status == 200:
                print("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!")
                return json.loads(response.read().decode('utf-8'))
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status}")
                return None
                
    except urllib.error.HTTPError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.code}")
        try:
            error_data = e.read().decode('utf-8')
            print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
        except:
            pass
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def extract_text(response):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API"""
    try:
        return response['result']['textAnnotation']['fullText']
    except KeyError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞")
        return None

def save_text(text, output_file):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª"""
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(text)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def find_images():
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ"""
    current_dir = Path.cwd()
    images = []
    
    for file in current_dir.iterdir():
        if file.suffix.lower() in SUPPORTED_EXTENSIONS:
            images.append(file)
    
    return sorted(images)

def process_image(image_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    print(f"\n{'='*50}")
    print(f"üñºÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞: {image_path.name}")
    print(f"{'='*50}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = send_ocr_request(str(image_path))
    
    if response:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        text = extract_text(response)
        
        if text:
            print(f"\nüìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
            print("-" * 30)
            print(text.strip())
            print("-" * 30)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_file = f"{image_path.stem}_text.txt"
            save_text(text, output_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            json_file = f"{image_path.stem}_response.json"
            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(response, f, ensure_ascii=False, indent=2)
            print(f"üóÇÔ∏è  JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {json_file}")
            
            return True
        else:
            print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    else:
        print("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return False

def main():
    """Main function"""
    print("üöÄ Yandex Vision OCR - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")
    print(f"üîë API –∫–ª—é—á: {API_KEY[:8]}...")
    print("-" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    if len(sys.argv) > 1:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
        file_path = Path(sys.argv[1])
        if not file_path.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return
        
        images = [file_path]
        print(f"üìÅ –†–µ–∂–∏–º: –æ–¥–∏–Ω —Ñ–∞–π–ª - {file_path.name}")
        
    else:
        # –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ
        images = find_images()
        if not images:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ")
            print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(SUPPORTED_EXTENSIONS)}")
            return
        
        print(f"üìÅ –†–µ–∂–∏–º: –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(images)}")
        for i, img in enumerate(images, 1):
            print(f"  {i}. {img.name}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    successful = 0
    for image in images:
        if process_image(image):
            successful += 1
    
    # –ò—Ç–æ–≥–∏
    print(f"\nüèÅ –ì–û–¢–û–í–û!")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {request_count}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(images)}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(images) - successful}")
    
    if request_count != len(images):
        print(f"‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤!")

if __name__ == "__main__":
    main()