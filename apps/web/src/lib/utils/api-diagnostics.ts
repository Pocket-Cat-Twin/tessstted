// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ development —Ä–µ–∂–∏–º–µ
import { api } from '../api/client-simple';
import { API_CONFIG } from '../config';

/**
 * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API —Å–∏—Å—Ç–µ–º—ã
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
 */
export async function runApiDiagnostics(): Promise<void> {
  console.log("üî¨ === –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –°–ò–°–¢–ï–ú–´ ===");
  
  try {
    const diagnostics = await api.runFullDiagnostics();
    
    console.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:");
    console.log(`   –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${getStatusEmoji(diagnostics.summary.overallStatus)} ${diagnostics.summary.overallStatus.toUpperCase()}`);
    console.log(`   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: ${diagnostics.summary.criticalIssues}`);
    console.log(`   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${diagnostics.summary.warnings}`);
    console.log(`   API –¥–æ—Å—Ç—É–ø–µ–Ω: ${diagnostics.summary.uptime ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);
    
    if (diagnostics.configuration.issues.length > 0) {
      console.log("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:");
      diagnostics.configuration.issues.forEach((issue, index) => {
        console.log(`   ${index + 1}. ${issue}`);
      });
    }
    
    if (diagnostics.configuration.recommendations.length > 0) {
      console.log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
      diagnostics.configuration.recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec}`);
      });
    }
    
    if (!diagnostics.health.success) {
      console.log("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° API –°–ï–†–í–ï–†–û–ú:");
      console.log(`   –û—à–∏–±–∫–∞: ${diagnostics.health.error}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${diagnostics.health.message}`);
      console.log("\nüîß –°–ü–û–°–û–ë–´ –†–ï–®–ï–ù–ò–Ø:");
      console.log("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001");
      console.log("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PUBLIC_API_URL –≤ .env —Ñ–∞–π–ª–µ");
      console.log("   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API_PORT=3001 –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞");
    }
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:", error);
  }
  
  console.log("üî¨ === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n");
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
 */
export function checkQuickConfig(): void {
  console.log("‚ö° === –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===");
  
  console.log("üîß –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API:");
  console.log(`   Base URL: ${API_CONFIG.BASE_URL}`);
  console.log(`   Timeout: ${API_CONFIG.REQUEST_CONFIG.DEFAULT_TIMEOUT}ms`);
  console.log(`   Retries: ${API_CONFIG.REQUEST_CONFIG.DEFAULT_RETRIES}`);
  
  // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  const issues: string[] = [];
  
  if (!API_CONFIG.BASE_URL.includes('/api/v1')) {
    issues.push("BASE_URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '/api/v1'");
  }
  
  if (!API_CONFIG.BASE_URL.startsWith('http')) {
    issues.push("BASE_URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://");
  }
  
  if (API_CONFIG.REQUEST_CONFIG.DEFAULT_TIMEOUT < 5000) {
    issues.push("Timeout —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (< 5 —Å–µ–∫—É–Ω–¥)");
  }
  
  if (issues.length === 0) {
    console.log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
  } else {
    console.log("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:");
    issues.forEach((issue, index) => {
      console.log(`   ${index + 1}. ${issue}`);
    });
  }
  
  console.log("‚ö° === –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===\n");
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
export function suggestConfigFixes(): void {
  console.log("üîß === –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===");
  
  console.log("üìù –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å API endpoints:");
  console.log("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª apps/web/.env —Å–æ–¥–µ—Ä–∂–∏—Ç:");
  console.log("   PUBLIC_API_URL=http://localhost:3001/api/v1");
  console.log("");
  console.log("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.windows:");
  console.log("   PUBLIC_API_URL=http://localhost:3001/api/v1");
  console.log("");
  console.log("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è .env:");
  console.log("   cd apps/web && bun run dev");
  console.log("");
  console.log("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:");
  console.log("   cd apps/api && bun run dev");
  console.log("");
  console.log("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API:");
  console.log("   curl http://localhost:3001/health");
  
  console.log("üîß === –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´ ===\n");
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusEmoji(status: string): string {
  switch (status) {
    case 'healthy': return '‚úÖ';
    case 'warning': return '‚ö†Ô∏è';
    case 'error': return '‚ùå';
    default: return '‚ùì';
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö endpoint'–æ–≤
 */
export async function testSpecificEndpoints(): Promise<void> {
  console.log("üéØ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–´–• ENDPOINTS ===");
  
  const endpointsToTest = [
    { name: "Health Check", method: () => api.checkHealth() },
    { name: "Config", method: () => api.getConfig() },
    { name: "Kurs", method: () => api.getKurs() },
  ];
  
  for (const endpoint of endpointsToTest) {
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${endpoint.name}...`);
    try {
      const result = await endpoint.method();
      if (result.success) {
        console.log(`   ‚úÖ ${endpoint.name}: –£—Å–ø–µ—à–Ω–æ`);
      } else {
        console.log(`   ‚ö†Ô∏è ${endpoint.name}: –û—à–∏–±–∫–∞ - ${result.error} - ${result.message}`);
      }
    } catch (error: any) {
      console.log(`   ‚ùå ${endpoint.name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - ${error.message}`);
    }
  }
  
  console.log("üéØ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –ó–ê–í–ï–†–®–ï–ù–û ===\n");
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ development —Ä–µ–∂–∏–º–µ
if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
  // –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  setTimeout(() => {
    checkQuickConfig();
  }, 1000);
  
  // –≠–∫—Å–ø–æ—Ä—Ç –≤ window –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  (window as any).apiDiagnostics = {
    runApiDiagnostics,
    checkQuickConfig,
    suggestConfigFixes,
    testSpecificEndpoints,
  };
  
  console.log("üõ†Ô∏è API Diagnostics –¥–æ—Å—Ç—É–ø–Ω—ã –≤ window.apiDiagnostics:");
  console.log("   - window.apiDiagnostics.runApiDiagnostics()");
  console.log("   - window.apiDiagnostics.checkQuickConfig()");
  console.log("   - window.apiDiagnostics.suggestConfigFixes()");
  console.log("   - window.apiDiagnostics.testSpecificEndpoints()");
}