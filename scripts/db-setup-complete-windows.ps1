# ================================
# Complete Database Setup for Windows
# YuYu Lolita Shopping System
# ================================

[CmdletBinding()]
param(
    [switch]$Force = $false,
    [switch]$SkipEnvironmentCheck = $false,
    [switch]$Verbose = $false
)

# Import common functions
. "$PSScriptRoot\PowerShell-Common.ps1"

function Show-Header {
    Write-Host ""
    Write-Host "üöÄ =================================================" -ForegroundColor Magenta
    Write-Host "üöÄ –ü–û–õ–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• (WINDOWS)" -ForegroundColor Magenta
    Write-Host "üöÄ YuYu Lolita Shopping System" -ForegroundColor Magenta  
    Write-Host "üöÄ MySQL8 + –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" -ForegroundColor Magenta
    Write-Host "üöÄ =================================================" -ForegroundColor Magenta
    Write-Host ""
}

function Invoke-EnvironmentCheck {
    Write-Host "üîç [PHASE 1] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Windows..." -ForegroundColor Cyan
    Write-Host ""
    
    $checkScript = Join-Path $PSScriptRoot "db-environment-check-windows.ps1"
    
    if (-not (Test-Path $checkScript)) {
        Write-Host "‚ùå [ERROR] –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
        return $false
    }
    
    try {
        $result = & powershell -ExecutionPolicy Bypass -File $checkScript -Fix
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ [SUCCESS] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå [ERROR] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!" -ForegroundColor Red
            Write-Host "üí° [SOLUTION] –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ" -ForegroundColor Yellow
            return $false
        }
    }
    catch {
        Write-Host "‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: $_" -ForegroundColor Red
        return $false
    }
}

function Invoke-DatabaseMigrations {
    Write-Host ""
    Write-Host "üîç [PHASE 2] –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Cyan
    Write-Host ""
    
    $projectRoot = Split-Path $PSScriptRoot -Parent
    $dbPackagePath = Join-Path $projectRoot "packages\db"
    
    if (-not (Test-Path $dbPackagePath)) {
        Write-Host "‚ùå [ERROR] –ü–∞–∫–µ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: $dbPackagePath" -ForegroundColor Red
        return $false
    }
    
    try {
        Push-Location $dbPackagePath
        
        Write-Host "üì¶ [INFO] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $dbPackagePath" -ForegroundColor Blue
        Write-Host "üîß [INFO] –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ bun..." -ForegroundColor Blue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ bun
        $bunPath = Get-Command bun -ErrorAction SilentlyContinue
        if (-not $bunPath) {
            Write-Host "‚ùå [ERROR] Bun –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!" -ForegroundColor Red
            Write-Host "üí° [SOLUTION] –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Bun: https://bun.sh/docs/installation" -ForegroundColor Yellow
            return $false
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        Write-Host "‚ñ∂Ô∏è [EXECUTE] bun run migrate:windows" -ForegroundColor Green
        & bun run migrate:windows
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ [SUCCESS] –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π!" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå [ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: $_" -ForegroundColor Red
        return $false
    }
    finally {
        Pop-Location
    }
}

function Invoke-UserSeed {
    Write-Host ""
    Write-Host "üîç [PHASE 3] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..." -ForegroundColor Cyan
    Write-Host ""
    
    $projectRoot = Split-Path $PSScriptRoot -Parent
    $dbPackagePath = Join-Path $projectRoot "packages\db"
    
    try {
        Push-Location $dbPackagePath
        
        Write-Host "üë• [INFO] –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..." -ForegroundColor Blue
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å–∫—Ä–∏–ø—Ç seed
        $seedScript = Join-Path $dbPackagePath "src\seed-users.ts"
        if (-not (Test-Path $seedScript)) {
            Write-Host "‚ùå [ERROR] –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: $seedScript" -ForegroundColor Red
            Write-Host "üí° [SOLUTION] –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª packages/db/src/seed-users.ts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" -ForegroundColor Yellow
            return $false
        }
        
        Write-Host "‚ñ∂Ô∏è [EXECUTE] bun run src/seed-users.ts" -ForegroundColor Green
        & bun run src/seed-users.ts
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ [SUCCESS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå [ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $_" -ForegroundColor Red
        return $false
    }
    finally {
        Pop-Location
    }
}

function Invoke-FinalHealthCheck {
    Write-Host ""
    Write-Host "üîç [PHASE 4] –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..." -ForegroundColor Cyan
    Write-Host ""
    
    $projectRoot = Split-Path $PSScriptRoot -Parent
    $dbPackagePath = Join-Path $projectRoot "packages\db"
    
    try {
        Push-Location $dbPackagePath
        
        Write-Host "üè• [INFO] –ó–∞–ø—É—Å–∫–∞–µ–º health check..." -ForegroundColor Blue
        
        Write-Host "‚ñ∂Ô∏è [EXECUTE] bun run health:mysql" -ForegroundColor Green
        & bun run health:mysql
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ [SUCCESS] Health check –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå [ERROR] Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ health check: $_" -ForegroundColor Red
        return $false
    }
    finally {
        Pop-Location
    }
}

# ================================
# MAIN EXECUTION
# ================================

Show-Header

$phases = @()

# Phase 1: Environment Check
if (-not $SkipEnvironmentCheck) {
    $phases += @{ Name = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"; Result = (Invoke-EnvironmentCheck) }
} else {
    Write-Host "‚è≠Ô∏è [SKIP] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É" -ForegroundColor Yellow
    $phases += @{ Name = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"; Result = $true }
}

# Phase 2: Database Migrations
if ($phases[-1].Result -or $Force) {
    $phases += @{ Name = "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î"; Result = (Invoke-DatabaseMigrations) }
} else {
    Write-Host "‚è≠Ô∏è [SKIP] –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–∞—Ö" -ForegroundColor Yellow
    $phases += @{ Name = "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î"; Result = $false }
}

# Phase 3: User Seed
if ($phases[-1].Result -or $Force) {
    $phases += @{ Name = "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"; Result = (Invoke-UserSeed) }
} else {
    Write-Host "‚è≠Ô∏è [SKIP] –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫" -ForegroundColor Yellow
    $phases += @{ Name = "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"; Result = $false }
}

# Phase 4: Final Health Check
if ($phases[-1].Result -or $Force) {
    $phases += @{ Name = "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"; Result = (Invoke-FinalHealthCheck) }
} else {
    Write-Host "‚è≠Ô∏è [SKIP] –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞" -ForegroundColor Yellow
    $phases += @{ Name = "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"; Result = $false }
}

# Summary
Write-Host ""
Write-Host "üìä =================================================" -ForegroundColor Magenta
Write-Host "üìä –ò–¢–û–ì–ò –ü–û–õ–ù–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ë–î" -ForegroundColor Magenta
Write-Host "üìä =================================================" -ForegroundColor Magenta

$successfulPhases = 0
foreach ($phase in $phases) {
    $status = if ($phase.Result) { "‚úÖ –£–°–ü–ï–®–ù–û" } else { "‚ùå –û–®–ò–ë–ö–ê" }
    $color = if ($phase.Result) { "Green" } else { "Red" }
    Write-Host "$status - $($phase.Name)" -ForegroundColor $color
    if ($phase.Result) { $successfulPhases++ }
}

Write-Host ""
Write-Host "üìà –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: $successfulPhases –∏–∑ $($phases.Count) —ç—Ç–∞–ø–æ–≤" -ForegroundColor Cyan

if ($successfulPhases -eq $phases.Count) {
    Write-Host ""
    Write-Host "üéâ [SUCCESS] –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
    Write-Host "üöÄ [NEXT] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!" -ForegroundColor Green
    Write-Host "üí° [INFO] –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" -ForegroundColor Yellow
    Write-Host ""
    exit 0
} else {
    Write-Host ""
    Write-Host "‚ùå [ERROR] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!" -ForegroundColor Red
    Write-Host "üí° [TIP] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã" -ForegroundColor Yellow
    if (-not $Force) {
        Write-Host "üí° [TIP] –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤" -ForegroundColor Yellow
    }
    Write-Host ""
    exit 1
}