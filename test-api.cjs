const postgres = require('postgres');

async function testAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

  const sql = postgres({
    host: '/var/run/postgresql',
    database: 'yuyu_lolita', 
    username: 'postgres',
  });

  try {
    // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üîå –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...');
    const now = await sql`SELECT NOW() as current_time`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', now[0].current_time);

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –∫–æ–ª–æ–Ω–∫—É 
    console.log('üîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É overall_verification_status...');
    const columnTest = await sql`
      SELECT column_name, data_type, column_default
      FROM information_schema.columns 
      WHERE table_name = 'users' AND column_name = 'overall_verification_status'
    `;
    
    if (columnTest.length > 0) {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ overall_verification_status –Ω–∞–π–¥–µ–Ω–∞!');
      console.log('   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:', columnTest[0].data_type);
      console.log('   –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', columnTest[0].column_default);
    } else {
      console.log('‚ùå –ö–æ–ª–æ–Ω–∫–∞ overall_verification_status –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º enum
    console.log('üîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º enum user_verification_status...');
    const enumTest = await sql`
      SELECT enumlabel 
      FROM pg_enum e
      JOIN pg_type t ON e.enumtypid = t.oid
      WHERE t.typname = 'user_verification_status'
      ORDER BY e.enumsortorder
    `;
    
    if (enumTest.length > 0) {
      console.log('‚úÖ Enum user_verification_status –Ω–∞–π–¥–µ–Ω!');
      console.log('   –ó–Ω–∞—á–µ–Ω–∏—è:', enumTest.map(r => r.enumlabel).join(', '));
    } else {
      console.log('‚ùå Enum user_verification_status –ù–ï –Ω–∞–π–¥–µ–Ω');
    }

    // –¢–µ—Å—Ç 4: –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîç –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º INSERT –≤ —Ç–∞–±–ª–∏—Ü—É users...');
    
    try {
      const insertResult = await sql`
        INSERT INTO users (email, password, registration_method, overall_verification_status)
        VALUES ('test@example.com', 'password123', 'email', 'unverified')
        RETURNING id, email, overall_verification_status
      `;
      
      console.log('‚úÖ INSERT —É—Å–ø–µ—à–µ–Ω!');
      console.log('   –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', insertResult[0]);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await sql`DELETE FROM users WHERE email = 'test@example.com'`;
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
      
    } catch (insertError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ INSERT:', insertError.message);
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
    console.log('üìä –¢–µ—Å—Ç 5: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î...');
    const stats = await sql`
      SELECT 
        (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public') as tables_count,
        (SELECT COUNT(*) FROM pg_type WHERE typtype = 'e') as enums_count,
        (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = 'users') as users_columns_count
    `;
    
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log('   –¢–∞–±–ª–∏—Ü:', stats[0].tables_count);
    console.log('   Enum-–æ–≤:', stats[0].enums_count); 
    console.log('   –ö–æ–ª–æ–Ω–æ–∫ –≤ users:', stats[0].users_columns_count);

    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', error);
  } finally {
    await sql.end();
  }
}

testAPI();