import { exec } from "child_process";
import { promisify } from "util";
import {
  testConnection,
  createDatabaseIfNotExists,
  migrationClient,
  queryClient,
} from "./connection";

const execAsync = promisify(exec);

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±—Ä–æ—Å–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –£—Ä–æ–≤–µ–Ω—å Senior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
 */

export async function resetDatabase(options: {
  dropDatabase?: boolean;
  runMigrations?: boolean;
  seedData?: boolean;
  verbose?: boolean;
} = {}) {
  const {
    dropDatabase = true,
    runMigrations = true,
    seedData = true,
    verbose = true,
  } = options;

  console.log("üöÄ –ü–û–õ–ù–´–ô –°–ë–†–û–° –ë–ê–ó–´ –î–ê–ù–ù–´–• - YuYu Lolita Shopping");
  console.log("=" .repeat(60));

  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    if (verbose) {
      console.log("üìã –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...");
    }
    
    const connectionWorking = await testConnection();
    if (!connectionWorking) {
      throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
    }
    
    if (verbose) {
      console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }

    // –®–∞–≥ 2: –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    if (dropDatabase) {
      if (verbose) {
        console.log("üìã –≠—Ç–∞–ø 2: –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
      }
      
      await dropDatabaseIfExists();
      
      if (verbose) {
        console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
      }
    }

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (verbose) {
      console.log("üìã –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    }
    
    const dbCreated = await createDatabaseIfNotExists();
    if (!dbCreated) {
      throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");
    }
    
    if (verbose) {
      console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    // –®–∞–≥ 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    if (runMigrations) {
      if (verbose) {
        console.log("üìã –≠—Ç–∞–ø 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã...");
      }
      
      await runDatabaseMigrations();
      
      if (verbose) {
        console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã");
      }
    }

    // –®–∞–≥ 5: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã
    if (verbose) {
      console.log("üìã –≠—Ç–∞–ø 5: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã...");
    }
    
    await validateDatabaseSchema();
    
    if (verbose) {
      console.log("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
    }

    // –®–∞–≥ 6: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if (seedData) {
      if (verbose) {
        console.log("üìã –≠—Ç–∞–ø 6: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...");
      }
      
      await seedDatabaseData();
      
      if (verbose) {
        console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (verbose) {
      console.log("üìã –≠—Ç–∞–ø 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...");
    }
    
    await performFinalValidation();
    
    console.log("=" .repeat(60));
    console.log("üéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ü–û–õ–ù–û–°–¢–¨–Æ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê!");
    console.log("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    console.log("üåê –ë–∞–∑–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
    console.log("=" .repeat(60));
    
    return true;
  } catch (error: any) {
    console.error("=" .repeat(60));
    console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –°–ë–†–û–°–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•");
    console.error("=" .repeat(60));
    console.error(`üî• –û—à–∏–±–∫–∞: ${error.message}`);
    console.error(`üìç –°—Ç–µ–∫: ${error.stack}`);
    console.error("=" .repeat(60));
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
    console.error("üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ:");
    console.error("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω: net start postgresql*");
    console.error("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
    console.error("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç 5432 –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
    console.error("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫");
    console.error("=" .repeat(60));
    
    return false;
  } finally {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    try {
      await queryClient.end();
      await migrationClient.end();
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    }
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 */
async function dropDatabaseIfExists(): Promise<void> {
  let adminClient: any = null;
  
  try {
    const connectionString = process.env.DATABASE_URL!;
    const dbName = new URL(connectionString).pathname.slice(1);
    const adminConnectionString = connectionString.replace(`/${dbName}`, '/postgres');
    
    // –ò–º–ø–æ—Ä—Ç postgres
    const postgres = (await import('postgres')).default;
    adminClient = postgres(adminConnectionString, { max: 1 });
    
    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '${dbName}'...`);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await adminClient.unsafe(`
      SELECT pg_terminate_backend(pg_stat_activity.pid)
      FROM pg_stat_activity
      WHERE pg_stat_activity.datname = '${dbName}' 
        AND pid <> pg_backend_pid()
    `);
    
    // –£–¥–∞–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await adminClient.unsafe(`DROP DATABASE IF EXISTS "${dbName}"`);
    
    console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '${dbName}' —É–¥–∞–ª–µ–Ω–∞`);
  } catch (error: any) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    throw error;
  } finally {
    if (adminClient) {
      try {
        await adminClient.end();
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
      }
    }
  }
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function runDatabaseMigrations(): Promise<void> {
  try {
    console.log("üìã –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...");
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Bun –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
    const { stdout, stderr } = await execAsync(
      "bun run migrate",
      { cwd: process.cwd() }
    );
    
    if (stderr && !stderr.includes("warning")) {
      console.warn("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:", stderr);
    }
    
    if (stdout) {
      console.log("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:", stdout);
    }
    
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:", error.message);
    throw error;
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function validateDatabaseSchema(): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
    const requiredTables = [
      'users', 'customers', 'orders', 'order_goods',
      'subscription_features', 'user_subscriptions',
      'stories', 'blog_categories', 'verification_tokens',
      'config', 'email_templates', 'faqs'
    ];
    
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...");
    
    for (const table of requiredTables) {
      const result = await queryClient`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = ${table}
        )
      `;
      
      if (!result[0]?.exists) {
        throw new Error(`‚ùå –¢–∞–±–ª–∏—Ü–∞ '${table}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ users –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü registration_method
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users...");
    
    const columnCheck = await queryClient`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'users' AND column_name = 'registration_method'
    `;
    
    if (columnCheck.length === 0) {
      throw new Error("‚ùå –°—Ç–æ–ª–±–µ—Ü 'registration_method' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users");
    }
    
    console.log("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã:", error.message);
    throw error;
  }
}

/**
 * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
async function seedDatabaseData(): Promise<void> {
  try {
    console.log("üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...");
    
    const { stdout, stderr } = await execAsync(
      "bun run seed",
      { cwd: process.cwd() }
    );
    
    if (stderr && !stderr.includes("warning")) {
      console.warn("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏:", stderr);
    }
    
    if (stdout) {
      console.log("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:", stdout);
    }
    
    console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏:", error.message);
    throw error;
  }
}

/**
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
 */
async function performFinalValidation(): Promise<void> {
  try {
    console.log("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    const userCount = await queryClient`SELECT COUNT(*) FROM users`;
    const orderCount = await queryClient`SELECT COUNT(*) FROM orders`;
    const configCount = await queryClient`SELECT COUNT(*) FROM config`;
    
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount[0]?.count || 0}`);
    console.log(`üì¶ –ó–∞–∫–∞–∑—ã: ${orderCount[0]?.count || 0}`);
    console.log(`‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${configCount[0]?.count || 0}`);
    
    if (Number(userCount[0]?.count || 0) < 2) {
      throw new Error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }
    
    if (Number(configCount[0]?.count || 0) < 5) {
      throw new Error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    }
    
    console.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞");
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", error.message);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.main) {
  resetDatabase({
    dropDatabase: true,
    runMigrations: true,
    seedData: true,
    verbose: true
  }).then((success) => {
    process.exit(success ? 0 : 1);
  });
}