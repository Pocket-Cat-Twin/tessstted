/**
 * Schema Validator - Prevents future schema-migration mismatches
 * 
 * This utility compares TypeScript schema definitions with actual database structure
 * to catch discrepancies before they cause runtime errors.
 */

import { db } from "./connection";
import * as schema from "./schema";

// Interface for future use if needed
// interface ColumnInfo {
//   columnName: string;
//   dataType: string;
//   isNullable: boolean;
//   defaultValue?: string;
// }

interface ValidationResult {
  tableName: string;
  status: 'ok' | 'error' | 'warning';
  issues: string[];
}

export async function validateSchemaIntegrity(): Promise<ValidationResult[]> {
  const results: ValidationResult[] = [];
  
  try {
    console.log("üîç Starting schema validation...");
    
    // Get all tables from the database
    const tables = await db.execute(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
    `);
    
    console.log(`üìã Found ${tables.length} tables in database`);
    
    for (const table of tables) {
      const tableName = table.table_name as string;
      const result = await validateTable(tableName);
      results.push(result);
    }
    
    // Summary
    const errors = results.filter(r => r.status === 'error').length;
    const warnings = results.filter(r => r.status === 'warning').length;
    const ok = results.filter(r => r.status === 'ok').length;
    
    console.log(`\nüìä Validation Summary:`);
    console.log(`  ‚úÖ OK: ${ok} tables`);
    console.log(`  ‚ö†Ô∏è  Warnings: ${warnings} tables`);
    console.log(`  ‚ùå Errors: ${errors} tables`);
    
    if (errors > 0) {
      console.log(`\nüö® Schema validation failed! ${errors} tables have critical issues.`);
    } else if (warnings > 0) {
      console.log(`\n‚ö†Ô∏è  Schema validation passed with warnings. ${warnings} tables have minor issues.`);
    } else {
      console.log(`\nüéâ Schema validation passed! All tables are in sync.`);
    }
    
  } catch (error) {
    console.error("‚ùå Schema validation failed:", error);
    results.push({
      tableName: 'VALIDATION_SYSTEM',
      status: 'error',
      issues: [`Validation system error: ${error}`]
    });
  }
  
  return results;
}

async function validateTable(tableName: string): Promise<ValidationResult> {
  const result: ValidationResult = {
    tableName,
    status: 'ok',
    issues: []
  };
  
  try {
    // Get columns from database
    const dbColumns = await db.execute(`
      SELECT 
        column_name,
        data_type,
        is_nullable,
        column_default
      FROM information_schema.columns
      WHERE table_schema = 'public' 
      AND table_name = $1
      ORDER BY ordinal_position
    `, [tableName]);
    
    console.log(`üîç Validating table '${tableName}' (${dbColumns.length} columns)`);
    
    // Check if table exists in schema exports
    const schemaTableName = tableName;
    const schemaTable = (schema as any)[schemaTableName];
    
    if (!schemaTable) {
      result.status = 'warning';
      result.issues.push(`Table '${tableName}' exists in database but not found in schema exports`);
      return result;
    }
    
    // Validate each database column
    for (const dbColumn of dbColumns) {
      const columnName = dbColumn.column_name as string;
      const dataType = dbColumn.data_type as string;
      const isNullable = dbColumn.is_nullable === 'YES';
      const defaultValue = dbColumn.column_default as string;
      
      // Check for common naming convention mismatches
      const camelCaseName = toCamelCase(columnName);
      const hasSchemaColumn = schemaTable[camelCaseName] !== undefined;
      
      if (!hasSchemaColumn) {
        result.status = 'error';
        result.issues.push(`Column '${columnName}' (${dataType}) exists in database but not in schema`);
      }
    }
    
    // Log successful validation
    if (result.issues.length === 0) {
      console.log(`  ‚úÖ ${tableName}: All columns validated successfully`);
    } else {
      console.log(`  ‚ùå ${tableName}: ${result.issues.length} issues found`);
      result.issues.forEach(issue => console.log(`    - ${issue}`));
    }
    
  } catch (error) {
    result.status = 'error';
    result.issues.push(`Error validating table: ${error}`);
    console.error(`‚ùå Error validating table '${tableName}':`, error);
  }
  
  return result;
}

function toCamelCase(snakeCase: string): string {
  return snakeCase.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
}

// CLI usage
if (require.main === module) {
  validateSchemaIntegrity()
    .then((results) => {
      const hasErrors = results.some(r => r.status === 'error');
      process.exit(hasErrors ? 1 : 0);
    })
    .catch((error) => {
      console.error("Fatal error:", error);
      process.exit(1);
    });
}