import { db } from "./connection";
import {
  users,
  config,
  faqs,
  emailTemplates,
  orders,
  orderGoods,
  stories,
  customers,
  customerAddresses,
  subscriptionFeatures,
  userSubscriptions,
  blogCategories,
  storyCategoryRelations,
  storyTags,
  storyTagRelations,
} from "./schema";
// Removed unused import: generateRandomString

export async function seedDatabase() {
  console.log("üå± Seeding database...");
  try {
    // Get or create admin user
    let adminUser = await db.query.users.findFirst({
      where: (users, { eq }) => eq(users.email, "admin@yuyulolita.com"),
    });

    if (!adminUser) {
      const inserted = await db
        .insert(users)
        .values({
          email: "admin@yuyulolita.com",
          password:
            "$2b$12$LQv3c1yqBwlzKzn8.OdKqOGaV9UlwT0jqk1QBgm1eJ8GhGYf9XVCG", // password: admin123
          name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
          fullName: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã",
          registrationMethod: "email",
          role: "admin",
          status: "active",
          emailVerified: true,
          phoneVerified: false,
        })
        .returning();
      adminUser = inserted[0];
      if (!adminUser) {
        throw new Error("Failed to create admin user");
      }
      console.log("‚úÖ Admin user created:", adminUser.email);
    } else {
      console.log("‚úÖ Admin user already exists:", adminUser.email);
    }

    // Get or create regular user
    let regularUser = await db.query.users.findFirst({
      where: (users, { eq }) => eq(users.email, "user@example.com"),
    });

    if (!regularUser) {
      const inserted = await db
        .insert(users)
        .values({
          email: "user@example.com",
          password:
            "$2b$12$LQv3c1yqBwlzKzn8.OdKqOGaV9UlwT0jqk1QBgm1eJ8GhGYf9XVCG", // password: user123
          name: "–ê–Ω–Ω–∞",
          fullName: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞",
          registrationMethod: "email",
          contactPhone: "+7 (999) 123-45-67",
          role: "user",
          status: "active",
          emailVerified: true,
          phoneVerified: false,
        })
        .returning();
      regularUser = inserted[0];
      if (!regularUser) {
        throw new Error("Failed to create regular user");
      }
      console.log("‚úÖ Regular user created:", regularUser.email);
    } else {
      console.log("‚úÖ Regular user already exists:", regularUser.email);
    }

    // Create a phone-registered user
    let phoneUser = await db.query.users.findFirst({
      where: (users, { eq }) => eq(users.phone, "+79991234568"),
    });

    if (!phoneUser) {
      const inserted = await db
        .insert(users)
        .values({
          phone: "+79991234568",
          password:
            "$2b$12$LQv3c1yqBwlzKzn8.OdKqOGaV9UlwT0jqk1QBgm1eJ8GhGYf9XVCG", // password: user123
          name: "–ú–∞—Ä–∏—è",
          fullName: "–ú–∞—Ä–∏—è –°–æ–∫–æ–ª–æ–≤–∞",
          registrationMethod: "phone",
          contactEmail: "maria@example.com",
          role: "user",
          status: "active",
          emailVerified: false,
          phoneVerified: true,
        })
        .returning();
      phoneUser = inserted[0];
      if (!phoneUser) {
        throw new Error("Failed to create phone user");
      }
      console.log("‚úÖ Phone user created:", phoneUser.phone);
    } else {
      console.log("‚úÖ Phone user already exists:", phoneUser.phone);
    }

    // Seed subscription features
    const existingFeatures = await db.query.subscriptionFeatures.findFirst();

    if (!existingFeatures) {
      const subscriptionFeaturesData = [
        {
          tier: "free" as const,
          maxStorageDays: 14,
          processingTimeHours: 120, // 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
          supportResponseHours: 48,
          canParticipateInPromotions: false,
          canCombineOrders: false,
          hasPriorityProcessing: false,
          hasPersonalSupport: false,
          hasProductInspection: false,
          description:
            "–û–±—ã—á–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫ (–ë–ï–°–ü–õ–ê–¢–ù–û) - —Ä–µ–¥–∫–∏–µ –∑–∞–∫–∞–∑—ã, –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —Å–µ—Ä–≤–∏—Å–æ–º",
        },
        {
          tier: "group" as const,
          maxStorageDays: 90, // 3 –º–µ—Å—è—Ü–∞
          processingTimeHours: 72, // 2‚Äì4 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è
          supportResponseHours: 24,
          canParticipateInPromotions: true,
          canCombineOrders: true,
          hasPriorityProcessing: false,
          hasPersonalSupport: false,
          hasProductInspection: false,
          description:
            "–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (990‚ÇΩ/–º–µ—Å—è—Ü) - –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã, —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏",
        },
        {
          tier: "elite" as const,
          maxStorageDays: -1, // –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
          processingTimeHours: 24, // –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
          supportResponseHours: 12, // –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–æ 12 —á–∞—Å–æ–≤
          canParticipateInPromotions: true,
          canCombineOrders: true,
          hasPriorityProcessing: true,
          hasPersonalSupport: true,
          hasProductInspection: true,
          description:
            "–≠–ª–∏—Ç–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫ (1990‚ÇΩ/–º–µ—Å—è—Ü) - –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã, —Ü–µ–Ω—è—â–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å–µ—Ä–≤–∏—Å",
        },
        {
          tier: "vip_temp" as const,
          maxStorageDays: 30,
          processingTimeHours: 12, // —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
          supportResponseHours: 6,
          canParticipateInPromotions: false,
          canCombineOrders: true,
          hasPriorityProcessing: true,
          hasPersonalSupport: true,
          hasProductInspection: true,
          description:
            "–†–∞–∑–æ–≤—ã–π VIP-–¥–æ—Å—Ç—É–ø (890‚ÇΩ –Ω–∞ 7 –¥–Ω–µ–π) - —Å—Ä–æ—á–Ω—ã–µ —Ä–∞–∑–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã",
        },
      ];

      await db.insert(subscriptionFeatures).values(subscriptionFeaturesData);
      console.log("‚úÖ Subscription features seeded");
    } else {
      console.log("‚úÖ Subscription features already exist");
    }

    // Create test subscriptions for users
    const existingSubscriptions = await db.query.userSubscriptions.findFirst();

    if (!existingSubscriptions && regularUser && phoneUser) {
      const subscriptionsData = [
        {
          userId: regularUser.id,
          tier: "elite" as const,
          status: "active" as const,
          price: "1990.00",
          startDate: new Date("2024-01-01T00:00:00Z"),
          endDate: new Date("2024-02-01T00:00:00Z"),
          autoRenew: true,
        },
        {
          userId: phoneUser.id,
          tier: "group" as const,
          status: "active" as const,
          price: "990.00",
          startDate: new Date("2024-01-15T00:00:00Z"),
          endDate: new Date("2024-02-15T00:00:00Z"),
          autoRenew: false,
        },
      ];

      await db.insert(userSubscriptions).values(subscriptionsData);
      console.log("‚úÖ Test subscriptions created");
    } else {
      console.log("‚úÖ Test subscriptions already exist");
    }

    // Create test customers
    let testCustomers = await db.query.customers.findMany();

    if (testCustomers.length === 0) {
      // Seed test customers
      const customersData = [
        {
          name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
          email: "anna@example.com",
          phone: "+7 (999) 123-45-67",
        },
        {
          name: "–ú–∞—Ä–∏—è –°–æ–∫–æ–ª–æ–≤–∞",
          email: "maria@example.com",
          phone: "+7 (999) 234-56-78",
        },
        {
          name: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–æ–ª–∫–æ–≤–∞",
          email: "kate@example.com",
          phone: "+7 (999) 345-67-89",
        },
        {
          name: "–û–ª—å–≥–∞ –õ–µ–±–µ–¥–µ–≤–∞",
          email: "olga@example.com",
          phone: "+7 (999) 456-78-90",
        },
        {
          name: "–°–≤–µ—Ç–ª–∞–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
          email: "svetlana@example.com",
          phone: "+7 (999) 567-89-01",
        },
      ];

      const insertedCustomers = await db
        .insert(customers)
        .values(customersData)
        .returning();
      
      if (insertedCustomers.length < 5) {
        throw new Error("Failed to create all customers");
      }
      console.log("‚úÖ Test customers created:", insertedCustomers.length);

      // Create addresses for each customer
      const addressesData = [
        {
          customerId: insertedCustomers[0]?.id || "",
          fullAddress: "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5",
          city: "–ú–æ—Å–∫–≤–∞",
          postalCode: "101000",
          isDefault: true,
        },
        {
          customerId: insertedCustomers[1]?.id || "",
          fullAddress: "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä., –¥. 25, –∫–≤. 12",
          city: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
          postalCode: "191011",
          isDefault: true,
        },
        {
          customerId: insertedCustomers[2]?.id || "",
          fullAddress: "–≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —É–ª. –ö—Ä–∞—Å–Ω—ã–π –ø—Ä., –¥. 18, –∫–≤. 3",
          city: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
          postalCode: "630007",
          isDefault: true,
        },
        {
          customerId: insertedCustomers[3]?.id || "",
          fullAddress: "–≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –ú–∞–ª—ã—à–µ–≤–∞, –¥. 42, –∫–≤. 8",
          city: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
          postalCode: "620014",
          isDefault: true,
        },
        {
          customerId: insertedCustomers[4]?.id || "",
          fullAddress: "–≥. –ö–∞–∑–∞–Ω—å, —É–ª. –ë–∞—É–º–∞–Ω–∞, –¥. 7, –∫–≤. 15",
          city: "–ö–∞–∑–∞–Ω—å",
          postalCode: "420012",
          isDefault: true,
        },
      ];

      await db.insert(customerAddresses).values(addressesData);
      console.log("‚úÖ Customer addresses created:", addressesData.length);

      testCustomers = insertedCustomers;
    } else {
      console.log("‚úÖ Test customers already exist:", testCustomers.length);
    }

    // Check if config already exists
    const existingConfig = await db.query.config.findFirst();

    if (!existingConfig) {
      // Seed configuration
      const configData = [
        {
          key: "current_kurs",
          value: "13.5",
          description: "–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å —é–∞–Ω—è –∫ —Ä—É–±–ª—é",
          type: "number" as const,
        },
        {
          key: "default_commission_rate",
          value: "0.10",
          description: "–ö–æ–º–∏—Å—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (10%)",
          type: "number" as const,
        },
        {
          key: "site_name",
          value: "YuYu Lolita Shopping",
          description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞",
          type: "string" as const,
        },
        {
          key: "site_description",
          value: "–ó–∞–∫–∞–∑—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ö–∏—Ç–∞—è —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –≤ –†–æ—Å—Å–∏—é",
          description: "–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞",
          type: "string" as const,
        },
        {
          key: "contact_email",
          value: "info@yuyulolita.com",
          description: "Email –¥–ª—è —Å–≤—è–∑–∏",
          type: "string" as const,
        },
        {
          key: "contact_phone",
          value: "+7 (999) 123-45-67",
          description: "–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏",
          type: "string" as const,
        },
        {
          key: "telegram_link",
          value: "https://t.me/YuyuLolitaShopping",
          description: "–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram",
          type: "string" as const,
        },
        {
          key: "vk_link",
          value: "https://vk.com/yuyulolitashopping",
          description: "–°—Å—ã–ª–∫–∞ –Ω–∞ VK",
          type: "string" as const,
        },
        {
          key: "max_file_size",
          value: "10485760",
          description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10MB)",
          type: "number" as const,
        },
        {
          key: "allowed_file_types",
          value: "image/jpeg,image/jpg,image/png,image/gif,image/webp",
          description: "–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤",
          type: "string" as const,
        },
      ];

      await db.insert(config).values(configData);
      console.log("‚úÖ Configuration seeded");
    } else {
      console.log("‚úÖ Configuration already exists");
    }

    // Check if FAQ already exists
    const existingFaq = await db.query.faqs.findFirst();

    if (!existingFaq) {
      // Seed FAQ
      const faqData = [
        {
          question: "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?",
          answer:
            '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑" –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
          order: 1,
        },
        {
          question: "–ö–∞–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –∑–∞–∫–∞–∑?",
          answer:
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 10% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
          order: 2,
        },
        {
          question: "–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞?",
          answer:
            "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–∞–º –±—É–¥—É—Ç –≤—ã—Å–ª–∞–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã. –û–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º.",
          order: 3,
        },
        {
          question: "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?",
          answer:
            "–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 2-4 –Ω–µ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.",
          order: 4,
        },
        {
          question: "–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑?",
          answer:
            "–î–∞, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏.",
          order: 5,
        },
      ];

      await db.insert(faqs).values(faqData);
      console.log("‚úÖ FAQ seeded");
    } else {
      console.log("‚úÖ FAQ already exists");
    }

    // Check if email templates already exist
    const existingTemplates = await db.query.emailTemplates.findFirst();

    if (!existingTemplates) {
      // Seed email templates
      const emailTemplatesData = [
        {
          name: "welcome",
          displayName: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ",
          subject: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YuYu Lolita Shopping!",
          htmlContent: `
          <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {{name}}!</h1>
          <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ YuYu Lolita Shopping.</p>
          <p>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
          <a href="{{verificationUrl}}">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email</a>
        `,
          textContent:
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {{name}}! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {{verificationUrl}}",
          availableVariables: "name, verificationUrl",
        },
        {
          name: "password_reset",
          displayName: "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è",
          subject: "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - YuYu Lolita Shopping",
          htmlContent: `
          <h1>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h1>
          <p>–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
          <a href="{{resetUrl}}">–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</a>
          <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
        `,
          textContent: "–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {{resetUrl}}",
          availableVariables: "resetUrl",
        },
        {
          name: "order_created",
          displayName: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
          subject: "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{{orderNumber}} —Å–æ–∑–¥–∞–Ω",
          htmlContent: `
          <h1>–ó–∞–∫–∞–∑ #{{orderNumber}} —Å–æ–∑–¥–∞–Ω</h1>
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{customerName}}!</p>
          <p>–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.</p>
          <p><strong>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</strong> {{totalAmount}} ‚ÇΩ</p>
          <p>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
          <a href="{{orderUrl}}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑</a>
        `,
          textContent:
            "–ó–∞–∫–∞–∑ #{{orderNumber}} —Å–æ–∑–¥–∞–Ω. –°—É–º–º–∞: {{totalAmount}} ‚ÇΩ. –°—Å—ã–ª–∫–∞: {{orderUrl}}",
          availableVariables: "orderNumber, customerName, totalAmount, orderUrl",
        },
      ];

      await db.insert(emailTemplates).values(emailTemplatesData);
      console.log("‚úÖ Email templates seeded");
    } else {
      console.log("‚úÖ Email templates already exist");
    }

    // Check if orders already exist
    const existingOrders = await db.query.orders.findFirst();

    if (!existingOrders && regularUser) {
      // Ensure we have enough customers for orders
      if (testCustomers.length < 3) {
        throw new Error("Not enough customers available for creating orders");
      }
      
      // Seed orders
      const orderData = [
        {
          nomerok: "YL123456",
          userId: regularUser.id,
          customerId: testCustomers[0]?.id || "",
          customerName: testCustomers[0]?.name || "Unknown Customer",
          customerPhone: testCustomers[0]?.phone || "+7 (999) 000-00-00",
          customerEmail: testCustomers[0]?.email || "unknown@example.com",
          deliveryAddress: "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5",
          deliveryMethod: "–°–î–≠–ö",
          paymentMethod: "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
          status: "processing" as const,
          subtotalYuan: "200.00",
          totalCommission: "275.00",
          currentKurs: "13.50",
          totalYuan: "200.00",
          totalRuble: "2750.00",
          notes: "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
          createdAt: new Date("2024-01-01T10:00:00Z"),
          updatedAt: new Date("2024-01-02T14:30:00Z"),
        },
        {
          nomerok: "YL789012",
          userId: regularUser.id,
          customerId: testCustomers[1]?.id || "",
          customerName: testCustomers[1]?.name || "Unknown Customer",
          customerPhone: testCustomers[1]?.phone || "+7 (999) 000-00-00",
          customerEmail: testCustomers[1]?.email || "unknown@example.com",
          deliveryAddress: "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä., –¥. 25, –∫–≤. 12",
          deliveryMethod: "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
          paymentMethod: "–°–ë–ü",
          status: "shipped" as const,
          subtotalYuan: "150.00",
          totalCommission: "208.75",
          currentKurs: "13.50",
          totalYuan: "150.00",
          totalRuble: "2087.50",
          trackingNumber: "RG123456789CN",
          notes: "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
          createdAt: new Date("2024-01-02T10:00:00Z"),
          updatedAt: new Date("2024-01-10T09:15:00Z"),
        },
        {
          nomerok: "YL345678",
          userId: regularUser.id,
          customerId: testCustomers[2]?.id || "",
          customerName: testCustomers[2]?.name || "Unknown Customer",
          customerPhone: testCustomers[2]?.phone || "+7 (999) 000-00-00",
          customerEmail: testCustomers[2]?.email || "unknown@example.com",
          deliveryAddress: "–≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, —É–ª. –ö—Ä–∞—Å–Ω—ã–π –ø—Ä., –¥. 18, –∫–≤. 3",
          deliveryMethod: "–°–î–≠–ö",
          paymentMethod: "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
          status: "created" as const,
          subtotalYuan: "300.00",
          totalCommission: "412.50",
          currentKurs: "13.50",
          totalYuan: "300.00",
          totalRuble: "4125.00",
          notes: "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑, –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
          createdAt: new Date("2024-01-03T15:30:00Z"),
          updatedAt: new Date("2024-01-03T15:30:00Z"),
        },
      ];

      const insertedOrders = await db
        .insert(orders)
        .values(orderData)
        .returning();
      
      if (insertedOrders.length < 3) {
        throw new Error("Failed to create all orders");
      }
      console.log("‚úÖ Orders seeded");

      // Seed order goods
      const orderGoodsData = [
        {
          orderId: insertedOrders[0]?.id || "",
          name: "–ü–ª–∞—Ç—å–µ Sweet Lolita —Ä–æ–∑–æ–≤–æ–µ",
          link: "https://example.com/dress1",
          quantity: 1,
          priceYuan: "200.00",
          commission: "20.00",
          totalYuan: "220.00",
          totalRuble: "2970.00",
        },
        {
          orderId: insertedOrders[1]?.id || "",
          name: "–ë–ª—É–∑–∫–∞ Gothic Lolita —á—ë—Ä–Ω–∞—è",
          link: "https://example.com/blouse1",
          quantity: 1,
          priceYuan: "150.00",
          commission: "15.00",
          totalYuan: "165.00",
          totalRuble: "2227.50",
        },
        {
          orderId: insertedOrders[2]?.id || "",
          name: "–Æ–±–∫–∞ Classic Lolita —Å–∏–Ω—è—è",
          link: "https://example.com/skirt1",
          quantity: 1,
          priceYuan: "180.00",
          commission: "18.00",
          totalYuan: "198.00",
          totalRuble: "2673.00",
        },
        {
          orderId: insertedOrders[2]?.id || "",
          name: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –≤–æ–ª–æ—Å",
          link: "https://example.com/accessories1",
          quantity: 1,
          priceYuan: "120.00",
          commission: "12.00",
          totalYuan: "132.00",
          totalRuble: "1782.00",
        },
      ];

      await db.insert(orderGoods).values(orderGoodsData);
      console.log("‚úÖ Order goods seeded");
    } else {
      console.log("‚úÖ Orders already exist");
    }

    // Check if stories already exist
    const existingStories = await db.query.stories.findFirst();

    if (!existingStories && regularUser && adminUser) {
      // Seed stories
      const storiesData = [
        {
          title: "–ú–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ Lolita –ø–ª–∞—Ç—å—è",
          link: "moy-pervyy-zakaz-lolita-platya",
          content: `
          <h2>–ö–∞–∫ —è –æ—Ç–∫—Ä—ã–ª–∞ –¥–ª—è —Å–µ–±—è –º–∏—Ä Lolita</h2>
          <p>–í—Å—ë –Ω–∞—á–∞–ª–æ—Å—å —Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ, –≥–¥–µ —è —É–≤–∏–¥–µ–ª–∞ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∫—Ä–∞—Å–∏–≤—ã–µ –ø–ª–∞—Ç—å—è –≤ —Å—Ç–∏–ª–µ Lolita. –Ø –±—ã–ª–∞ –ø–æ—Ä–∞–∂–µ–Ω–∞ –∏—Ö —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å—é –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π.</p>
          <p>–ü–æ—Å–ª–µ –¥–æ–ª–≥–∏—Ö –ø–æ–∏—Å–∫–æ–≤ —è –Ω–∞—à–ª–∞ YuYu Lolita Shopping –∏ —Ä–µ—à–∏–ª–∞ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑. –ü—Ä–æ—Ü–µ—Å—Å –æ–∫–∞–∑–∞–ª—Å—è –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–º –∏ —É–¥–æ–±–Ω—ã–º.</p>
          <p>–ü–ª–∞—Ç—å–µ –ø—Ä–∏—à–ª–æ —á–µ—Ä–µ–∑ 3 –Ω–µ–¥–µ–ª–∏ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤–∑–æ—à–ª–æ –≤—Å–µ –º–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è!</p>
        `,
          excerpt:
            "–ò—Å—Ç–æ—Ä–∏—è –æ —Ç–æ–º, –∫–∞–∫ —è –æ—Ç–∫—Ä—ã–ª–∞ –¥–ª—è —Å–µ–±—è –º–∏—Ä Lolita –∏ —Å–¥–µ–ª–∞–ª–∞ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ YuYu Lolita Shopping.",
          thumbnail: "https://example.com/images/story1.jpg",
          authorId: regularUser.id,
          status: "published" as const,
          publishedAt: new Date("2024-01-15T10:00:00Z"),
        },
        {
          title: "–ì–∏–¥ –ø–æ —Å—Ç–∏–ª—è–º Lolita –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
          link: "gid-po-stilyam-lolita-dlya-nachinayuschih",
          content: `
          <h2>–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ Lolita</h2>
          <p><strong>Sweet Lolita</strong> - —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Å—Ç–∏–ª—å, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∏–π—Å—è –ø–∞—Å—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏, —Ä—é—à–∞–º–∏ –∏ –º–∏–ª—ã–º–∏ –ø—Ä–∏–Ω—Ç–∞–º–∏.</p>
          <p><strong>Gothic Lolita</strong> - —Ç—ë–º–Ω—ã–π –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —Å—Ç–∏–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —á—ë—Ä–Ω–æ–≥–æ, –±–µ–ª–æ–≥–æ –∏ —Ç—ë–º–Ω–æ-–∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ–≤.</p>
          <p><strong>Classic Lolita</strong> - –±–æ–ª–µ–µ –∑—Ä–µ–ª—ã–π –∏ —É—Ç–æ–Ω—á—ë–Ω–Ω—ã–π —Å—Ç–∏–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤.</p>
          <p>–ö–∞–∂–¥—ã–π —Å—Ç–∏–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.</p>
        `,
          excerpt:
            "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∏–¥ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Å—Ç–∏–ª—è–º Lolita –º–æ–¥—ã –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ—ë –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.",
          thumbnail: "https://example.com/images/story2.jpg",
          authorId: adminUser.id,
          status: "published" as const,
          publishedAt: new Date("2024-01-20T14:00:00Z"),
        },
        {
          title: "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ Lolita –ø–ª–∞—Ç—å—è–º–∏",
          link: "kak-pravilno-uhazhivat-za-lolita-platyami",
          content: `
          <h2>–°–µ–∫—Ä–µ—Ç—ã –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –ø–ª–∞—Ç—å–µ–≤</h2>
          <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ö–æ–¥ –∑–∞ Lolita –ø–ª–∞—Ç—å—è–º–∏ –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –∫—Ä–∞—Å–æ—Ç—É –Ω–∞ –¥–æ–ª–≥–∏–µ –≥–æ–¥—ã.</p>
          <p><strong>–°—Ç–∏—Ä–∫–∞:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º –≤ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥–µ. –õ—É—á—à–µ –≤—Å–µ–≥–æ —Å—Ç–∏—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é.</p>
          <p><strong>–°—É—à–∫–∞:</strong> –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—à–∏–ª–∫—É. –°—É—à–∏—Ç–µ –ø–ª–∞—Ç—å—è –≤ —Ä–∞—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –≤–∏–¥–µ –Ω–∞ –ø–ª–æ—Å–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.</p>
          <p><strong>–•—Ä–∞–Ω–µ–Ω–∏–µ:</strong> –•—Ä–∞–Ω–∏—Ç–µ –ø–ª–∞—Ç—å—è –Ω–∞ –≤–µ—à–∞–ª–∫–∞—Ö –≤ —á–µ—Ö–ª–∞—Ö –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π.</p>
          <p><strong>–ì–ª–∞–∂–∫–∞:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏–∑–∫—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –≥–ª–∞–¥—å—Ç–µ —á–µ—Ä–µ–∑ —Ç–∫–∞–Ω—å.</p>
        `,
          excerpt:
            "–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ Lolita –ø–ª–∞—Ç—å—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –ø–µ—Ä–≤–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏–¥.",
          thumbnail: "https://example.com/images/story3.jpg",
          authorId: adminUser.id,
          status: "published" as const,
          publishedAt: new Date("2024-01-25T16:00:00Z"),
        },
      ];

      const insertedStories = await db
        .insert(stories)
        .values(storiesData)
        .returning();
      
      if (insertedStories.length < 3) {
        throw new Error("Failed to create all stories");
      }
      console.log("‚úÖ Stories seeded");

      // Create blog categories
      const existingCategories = await db.query.blogCategories.findFirst();

      if (!existingCategories) {
        const categoriesData = [
          {
            name: "–¢–æ–≤–∞—Ä—ã",
            slug: "tovary",
            description: "–û–±–∑–æ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤, –Ω–æ–≤–∏–Ω–∫–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            color: "#EC4899",
            order: 1,
            metaTitle: "–¢–æ–≤–∞—Ä—ã | YuYu Lolita Shopping",
            metaDescription: "–û–±–∑–æ—Ä—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—Ç–∏–ª–µ Lolita",
          },
          {
            name: "–ù–æ–≤–æ—Å—Ç–∏",
            slug: "novosti",
            description: "–ù–æ–≤–æ—Å—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏",
            color: "#3B82F6",
            order: 2,
            metaTitle: "–ù–æ–≤–æ—Å—Ç–∏ | YuYu Lolita Shopping",
            metaDescription: "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ Lolita –º–æ–¥—ã",
          },
          {
            name: "–ê–∫—Ü–∏–∏",
            slug: "akcii",
            description: "–°–∫–∏–¥–∫–∏, –∞–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            color: "#F59E0B",
            order: 3,
            metaTitle: "–ê–∫—Ü–∏–∏ | YuYu Lolita Shopping",
            metaDescription: "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
          },
          {
            name: "–ì–∞–π–¥—ã",
            slug: "gaidy",
            description: "–ü–æ–ª–µ–∑–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∏ —Å–æ–≤–µ—Ç—ã",
            color: "#10B981",
            order: 4,
            metaTitle: "–ì–∞–π–¥—ã | YuYu Lolita Shopping",
            metaDescription: "–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é Lolita –∏ –ø–æ–∫—É–ø–∫–∞–º",
          },
        ];

        const insertedCategories = await db
          .insert(blogCategories)
          .values(categoriesData)
          .returning();
        
        if (insertedCategories.length < 4) {
          throw new Error("Failed to create all blog categories");
        }
        console.log("‚úÖ Blog categories seeded");

        // Create tags
        const tagsData = [
          { name: "Sweet Lolita", slug: "sweet-lolita", color: "#EC4899" },
          { name: "Gothic Lolita", slug: "gothic-lolita", color: "#1F2937" },
          { name: "Classic Lolita", slug: "classic-lolita", color: "#6B7280" },
          { name: "–ü–ª–∞—Ç—å—è", slug: "platya", color: "#F472B6" },
          { name: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", slug: "aksessuary", color: "#A78BFA" },
          { name: "–£—Ö–æ–¥", slug: "uhod", color: "#34D399" },
          { name: "–ù–æ–≤–∏—á–∫–∞–º", slug: "novichkam", color: "#60A5FA" },
          { name: "–°–æ–≤–µ—Ç—ã", slug: "sovety", color: "#FBBF24" },
        ];

        const insertedTags = await db
          .insert(storyTags)
          .values(tagsData)
          .returning();
        
        if (insertedTags.length < 8) {
          throw new Error("Failed to create all story tags");
        }
        console.log("‚úÖ Story tags seeded");

        // Link stories with categories and tags
        const categoryRelationsData = [
          {
            storyId: insertedStories[0]?.id || "",
            categoryId: insertedCategories[0]?.id || "",
          }, // –¢–æ–≤–∞—Ä—ã
          {
            storyId: insertedStories[1]?.id || "",
            categoryId: insertedCategories[3]?.id || "",
          }, // –ì–∞–π–¥—ã
          {
            storyId: insertedStories[2]?.id || "",
            categoryId: insertedCategories[3]?.id || "",
          }, // –ì–∞–π–¥—ã
        ];

        const tagRelationsData = [
          { storyId: insertedStories[0]?.id || "", tagId: insertedTags[0]?.id || "" }, // Sweet Lolita
          { storyId: insertedStories[0]?.id || "", tagId: insertedTags[3]?.id || "" }, // –ü–ª–∞—Ç—å—è
          { storyId: insertedStories[1]?.id || "", tagId: insertedTags[6]?.id || "" }, // –ù–æ–≤–∏—á–∫–∞–º
          { storyId: insertedStories[1]?.id || "", tagId: insertedTags[7]?.id || "" }, // –°–æ–≤–µ—Ç—ã
          { storyId: insertedStories[2]?.id || "", tagId: insertedTags[5]?.id || "" }, // –£—Ö–æ–¥
          { storyId: insertedStories[2]?.id || "", tagId: insertedTags[7]?.id || "" }, // –°–æ–≤–µ—Ç—ã
        ];

        await db.insert(storyCategoryRelations).values(categoryRelationsData);
        await db.insert(storyTagRelations).values(tagRelationsData);
        console.log("‚úÖ Story-category and story-tag relations created");
      } else {
        console.log("‚úÖ Blog categories already exist");
      }
    } else {
      console.log("‚úÖ Stories already exist");
    }

    console.log("üéâ Database seeding completed successfully!");
    console.log("");
    console.log("üë§ Test users created:");
    console.log("üìß Admin: admin@yuyulolita.com / password: admin123");
    console.log("üë§ User: user@example.com / password: user123");
    console.log("üì± Phone User: +79991234568 / password: user123");
    console.log("");
    console.log("üéØ Subscription system:");
    console.log("üíé 4 subscription tiers with features configured");
    console.log("üìä Test subscriptions: Elite, Group plans active");
    console.log("");
    console.log("üì¶ E-commerce data:");
    console.log("üì¶ Test orders created: 3 orders with goods");
    console.log("üë• Test customers: 5 customers with addresses");
    console.log("");
    console.log("üìù Content system:");
    console.log("üìñ Test stories: 3 published stories with categories/tags");
    console.log("üè∑Ô∏è Blog categories: –¢–æ–≤–∞—Ä—ã, –ù–æ–≤–æ—Å—Ç–∏, –ê–∫—Ü–∏–∏, –ì–∞–π–¥—ã");
    console.log("üîñ Story tags: 8 tags for content classification");
    console.log("");
    console.log("‚öôÔ∏è Configuration:");
    console.log("üí∞ Currency rates, commission settings");
    console.log("‚ùì FAQ system populated");
    console.log("üìß Email templates configured");
  } catch (error) {
    console.error("‚ùå Seeding failed:", error);
    process.exit(1);
  }
}

if (import.meta.main) {
  seedDatabase();
}
