// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è Windows
// YuYu Lolita Shopping System - –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
import { initializeConnection, testConnection } from "./connection.js";
import { ConfigurationError } from "./config.js";
import { 
  createAdminUser, 
  createTestUser, 
  displayCredentialsInfo,
  USER_GENERATION_CONSTANTS 
} from "./user-generator.js";

export async function seedUsers(): Promise<void> {
  console.log('');
  console.log('üå± ========================================');
  console.log('üå± –°–û–ó–î–ê–ù–ò–ï –ù–ê–ß–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
  console.log('üå± YuYu Lolita Shopping System - –°–¢–ê–ù–î–ê–†–¢–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø');
  console.log('üå± ========================================');
  console.log('');
  
  try {
    // Initialize database connection with environment configuration
    console.log('[SEED] üîß Initializing database connection...');
    initializeConnection();
    
    // Test connection before proceeding
    console.log('[SEED] üß™ Testing database connectivity...');
    await testConnection();
    console.log('[SEED] ‚úÖ Database connection verified');
    console.log('');
    console.log('üëë –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    const adminPassword = await createAdminUser('seeding');
    
    console.log('');
    console.log('üîê ========================================');
    console.log('üîê –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–†–û–õ–ï –ê–î–ú–ò–ù–ê');
    console.log('üîê ========================================');
    console.log(`üîê Email: ${USER_GENERATION_CONSTANTS.ADMIN_EMAIL}`);
    console.log(`üîê –ü–∞—Ä–æ–ª—å: ${adminPassword}`);
    console.log('üîê ========================================');
    console.log('üìù –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ credentials.txt');
    console.log('üîí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    console.log('üîê ========================================');
    console.log('');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è development)
    if (process.env.NODE_ENV !== 'production') {
      console.log('üë• –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      await createTestUser('test1@yuyulolita.com', 'test1', 'Test123!', 'seeding');
      await createTestUser('test2@yuyulolita.com', 'test2', 'Test123!', 'seeding');
      await createTestUser('test3@yuyulolita.com', 'test3', 'Test123!', 'seeding');
      
      console.log('');
      console.log('üë• ========================================');
      console.log('üë• –¢–ï–°–¢–û–í–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –°–û–ó–î–ê–ù–´');
      console.log('üë• ========================================');
      console.log('üë• Email: test1@yuyulolita.com');
      console.log('üë• Email: test2@yuyulolita.com');  
      console.log('üë• Email: test3@yuyulolita.com');
      console.log('üë• –í—Å–µ –ø–∞—Ä–æ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ credentials.txt');
      console.log('üë• ========================================');
      console.log('');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { getPool } = await import('./connection.js');
    const pool = await getPool();
    const [rows] = await pool.execute('SELECT email, role, status FROM users ORDER BY role DESC, email');
    const users = rows as any[];
    
    console.log('üìä ========================================');
    console.log('üìä –°–ü–ò–°–û–ö –°–û–ó–î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('üìä ========================================');
    users.forEach(user => {
      const roleIcon = user.role === 'admin' ? 'üëë' : 'üë§';
      const statusIcon = user.status === 'active' ? '‚úÖ' : '‚è∏Ô∏è';
      console.log(`${roleIcon} ${user.email} (${user.role}) ${statusIcon}`);
    });
    console.log('üìä ========================================');
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    displayCredentialsInfo();
    
    console.log('üéâ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    console.log('');
    
  } catch (error) {
    console.error('');
    console.error('‚ùå ========================================');
    console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.error('‚ùå ========================================');
    
    if (error instanceof ConfigurationError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
      console.error('‚ùå', error.message);
      console.error('');
      console.error('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MySQL');
    } else if (error instanceof Error) {
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
      if (error.message.includes('Access denied')) {
        console.error('');
        console.error('‚ùå –†–ï–®–ï–ù–ò–ï:');
        console.error('‚ùå 1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DB_PASSWORD –≤ —Ñ–∞–π–ª–µ .env');
        console.error('‚ùå 2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
        console.error('‚ùå 3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MySQL');
      }
    } else {
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    }
    
    console.error('‚ùå ========================================');
    console.error('');
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url.includes(process.argv[1]?.replace(/\\/g, '/') || '')) {
  seedUsers()
    .then(() => {
      console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}