// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è Windows
// YuYu Lolita Shopping System
import { getPool, initializeConnection, testConnection } from "./connection.js";
import { getUserByEmail } from "./query-builders.js";
import { ConfigurationError } from "./config.js";

async function hashPassword(password: string): Promise<string> {
  // –ü—Ä–æ—Å—Ç–æ–π hash –¥–ª—è demo - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bcrypt
  const crypto = await import('crypto');
  return crypto.createHash('sha256').update(password + 'yuyulolita_salt').digest('hex');
}

function generateSecurePassword(): string {
  const length = 12;
  const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';
  let password = '';
  
  // Ensure at least one character from each required type
  password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)]; // uppercase
  password += 'abcdefghijklmnopqrstuvwxyz'[Math.floor(Math.random() * 26)]; // lowercase
  password += '0123456789'[Math.floor(Math.random() * 10)]; // digit
  password += '!@#$%^&*'[Math.floor(Math.random() * 8)]; // special
  
  // Fill the rest randomly
  for (let i = 4; i < length; i++) {
    password += charset[Math.floor(Math.random() * charset.length)];
  }
  
  // Shuffle the password
  return password.split('').sort(() => Math.random() - 0.5).join('');
}

async function createUser(
  email: string, 
  password: string, 
  role: 'admin' | 'user' = 'user', 
  name: string = '',
  fullName: string = ''
): Promise<void> {
  const pool = await getPool();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existing = await getUserByEmail(email);
    if (existing) {
      console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }
    
    const hashedPassword = await hashPassword(password);
    const userName = name || email.split('@')[0];
    const userFullName = fullName || userName;
    
    await pool.execute(`
      INSERT INTO users (
        id, email, password_hash, name, full_name, registration_method, 
        role, status, email_verified, created_at, updated_at
      ) VALUES (UUID(), ?, ?, ?, ?, 'email', ?, 'active', true, NOW(), NOW())
    `, [email, hashedPassword, userName, userFullName, role]);
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ (—Ä–æ–ª—å: ${role})`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${email}:`, error);
    throw error;
  }
}

export async function seedUsers(): Promise<void> {
  console.log('');
  console.log('üå± ========================================');
  console.log('üå± –°–û–ó–î–ê–ù–ò–ï –ù–ê–ß–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
  console.log('üå± YuYu Lolita Shopping System');
  console.log('üå± ========================================');
  console.log('');
  
  try {
    // Initialize database connection with environment configuration
    console.log('[SEED] üîß Initializing database connection...');
    initializeConnection();
    
    // Test connection before proceeding
    console.log('[SEED] üß™ Testing database connectivity...');
    await testConnection();
    console.log('[SEED] ‚úÖ Database connection verified');
    console.log('');
    console.log('üëë –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    const adminPassword = generateSecurePassword();
    await createUser(
      'admin@yuyulolita.com', 
      adminPassword, 
      'admin', 
      'admin',
      '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    );
    
    console.log('');
    console.log('üîê ========================================');
    console.log('üîê –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ê–†–û–õ–ï –ê–î–ú–ò–ù–ê');
    console.log('üîê ========================================');
    console.log(`üîê Email: admin@yuyulolita.com`);
    console.log(`üîê –ü–∞—Ä–æ–ª—å: ${adminPassword}`);
    console.log('üîê ========================================');
    console.log('üìù –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å!');
    console.log('üîí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
    console.log('üîê ========================================');
    console.log('');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è development)
    if (process.env.NODE_ENV !== 'production') {
      console.log('üë• –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      await createUser(
        'test1@yuyulolita.com', 
        'Test123!', 
        'user', 
        'test1',
        '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1'
      );
      
      await createUser(
        'test2@yuyulolita.com', 
        'Test123!', 
        'user', 
        'test2',
        '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2'
      );
      
      await createUser(
        'test3@yuyulolita.com', 
        'Test123!', 
        'user', 
        'test3',
        '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3'
      );
      
      console.log('');
      console.log('üë• ========================================');
      console.log('üë• –¢–ï–°–¢–û–í–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –°–û–ó–î–ê–ù–´');
      console.log('üë• ========================================');
      console.log('üë• Email: test1@yuyulolita.com');
      console.log('üë• Email: test2@yuyulolita.com');  
      console.log('üë• Email: test3@yuyulolita.com');
      console.log('üë• –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö: Test123!');
      console.log('üë• ========================================');
      console.log('');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const pool = await getPool();
    const [rows] = await pool.execute('SELECT email, role, status FROM users ORDER BY role DESC, email');
    const users = rows as any[];
    
    console.log('üìä ========================================');
    console.log('üìä –°–ü–ò–°–û–ö –°–û–ó–î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('üìä ========================================');
    users.forEach(user => {
      const roleIcon = user.role === 'admin' ? 'üëë' : 'üë§';
      const statusIcon = user.status === 'active' ? '‚úÖ' : '‚è∏Ô∏è';
      console.log(`${roleIcon} ${user.email} (${user.role}) ${statusIcon}`);
    });
    console.log('üìä ========================================');
    
    console.log('');
    console.log('üéâ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    console.log('');
    
  } catch (error) {
    console.error('');
    console.error('‚ùå ========================================');
    console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.error('‚ùå ========================================');
    
    if (error instanceof ConfigurationError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
      console.error('‚ùå', error.message);
      console.error('');
      console.error('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MySQL');
    } else if (error instanceof Error) {
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
      if (error.message.includes('Access denied')) {
        console.error('');
        console.error('‚ùå –†–ï–®–ï–ù–ò–ï:');
        console.error('‚ùå 1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DB_PASSWORD –≤ —Ñ–∞–π–ª–µ .env');
        console.error('‚ùå 2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
        console.error('‚ùå 3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MySQL');
      }
    } else {
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    }
    
    console.error('‚ùå ========================================');
    console.error('');
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url.includes(process.argv[1]?.replace(/\\/g, '/') || '')) {
  seedUsers()
    .then(() => {
      console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { createUser };