import { queryClient } from "./connection";

/**
 * –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * Senior-level –ø–æ–¥—Ö–æ–¥: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏, –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

export interface ValidationResult {
  valid: boolean;
  errors: string[];
  warnings: string[];
  summary: {
    tablesFound: number;
    columnsChecked: number;
    indexesValidated: number;
    constraintsVerified: number;
  };
}

export interface TableDefinition {
  name: string;
  requiredColumns: string[];
  requiredIndexes?: string[];
  requiredConstraints?: string[];
  customChecks?: ((tableName: string) => Promise<string[]>)[];
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
const EXPECTED_SCHEMA: TableDefinition[] = [
  {
    name: "users",
    requiredColumns: [
      "id", "email", "phone", "password", "registration_method",
      "name", "full_name", "role", "status", "email_verified",
      "phone_verified", "created_at", "updated_at"
    ],
    requiredIndexes: [
      "users_email_unique_idx", "users_phone_unique_idx"
    ],
    requiredConstraints: [
      "users_email_or_phone_required"
    ],
    customChecks: [validateUsersLogic]
  },
  {
    name: "customers",
    requiredColumns: [
      "id", "name", "email", "phone", "created_at", "updated_at"
    ]
  },
  {
    name: "orders",
    requiredColumns: [
      "id", "nomerok", "user_id", "customer_id", "customer_name",
      "customer_phone", "delivery_address", "status", "total_yuan",
      "total_ruble", "created_at", "updated_at"
    ],
    requiredConstraints: [
      "orders_nomerok_unique"
    ]
  },
  {
    name: "order_goods",
    requiredColumns: [
      "id", "order_id", "name", "quantity", "price_yuan", 
      "commission", "total_yuan", "total_ruble"
    ]
  },
  {
    name: "subscription_features",
    requiredColumns: [
      "id", "tier", "max_storage_days", "processing_time_hours",
      "support_response_hours", "description"
    ]
  },
  {
    name: "user_subscriptions",
    requiredColumns: [
      "id", "user_id", "tier", "status", "price", "start_date",
      "end_date", "auto_renew"
    ]
  },
  {
    name: "stories",
    requiredColumns: [
      "id", "title", "link", "content", "status", "author_id", "created_at"
    ],
    requiredConstraints: [
      "stories_link_unique"
    ]
  },
  {
    name: "blog_categories",
    requiredColumns: [
      "id", "name", "slug", "description", "color", "order", "is_active"
    ]
  },
  {
    name: "verification_tokens",
    requiredColumns: [
      "id", "user_id", "type", "status", "email", "phone", "token",
      "code", "expires_at", "created_at"
    ],
    requiredIndexes: [
      "verification_tokens_token_idx", "verification_tokens_type_status_idx"
    ]
  },
  {
    name: "config",
    requiredColumns: [
      "id", "key", "value", "description", "type", "created_at", "updated_at"
    ],
    requiredConstraints: [
      "config_key_unique"
    ]
  }
];

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã
 */
export async function validateDatabaseSchema(): Promise<ValidationResult> {
  const result: ValidationResult = {
    valid: true,
    errors: [],
    warnings: [],
    summary: {
      tablesFound: 0,
      columnsChecked: 0,
      indexesValidated: 0,
      constraintsVerified: 0
    }
  };

  console.log("üîç –ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

  try {
    // –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    console.log("üìã –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...");
    await validateTables(result);

    // –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    console.log("üìã –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–æ–ª–±—Ü–æ–≤...");
    await validateColumns(result);

    // –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log("üìã –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");
    await validateIndexes(result);

    // –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    console.log("üìã –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...");
    await validateConstraints(result);

    // –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ ENUM —Ç–∏–ø–æ–≤
    console.log("üìã –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ ENUM —Ç–∏–ø–æ–≤...");
    await validateEnums(result);

    // –≠—Ç–∞–ø 6: –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log("üìã –≠—Ç–∞–ø 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏...");
    await validateBusinessLogic(result);

    // –≠—Ç–∞–ø 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log("üìã –≠—Ç–∞–ø 7: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");
    await validatePerformance(result);

  } catch (error: any) {
    result.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
    result.valid = false;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  result.valid = result.errors.length === 0;

  // –í—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞
  printValidationReport(result);

  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
 */
async function validateTables(result: ValidationResult): Promise<void> {
  try {
    const existingTables = await queryClient`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `;

    const existingTableNames = existingTables.map(t => t.table_name);
    result.summary.tablesFound = existingTableNames.length;

    for (const tableDef of EXPECTED_SCHEMA) {
      if (!existingTableNames.includes(tableDef.name)) {
        result.errors.push(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–±–ª–∏—Ü–∞: ${tableDef.name}`);
      } else {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞: ${tableDef.name}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—à–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–º–æ–≥—É—Ç –±—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
    const expectedTableNames = EXPECTED_SCHEMA.map(t => t.name);
    const extraTables = existingTableNames.filter(t => 
      !expectedTableNames.includes(t) && 
      !t.startsWith('drizzle') && 
      !t.startsWith('_')
    );

    if (extraTables.length > 0) {
      result.warnings.push(`‚ö†Ô∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: ${extraTables.join(', ')}`);
    }

  } catch (error: any) {
    result.errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–æ–ª–±—Ü–æ–≤
 */
async function validateColumns(result: ValidationResult): Promise<void> {
  try {
    for (const tableDef of EXPECTED_SCHEMA) {
      const columns = await queryClient`
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns 
        WHERE table_name = ${tableDef.name}
        ORDER BY ordinal_position
      `;

      const existingColumns = columns.map(c => c.column_name);
      result.summary.columnsChecked += existingColumns.length;

      for (const requiredColumn of tableDef.requiredColumns) {
        if (!existingColumns.includes(requiredColumn)) {
          result.errors.push(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü '${requiredColumn}' –≤ —Ç–∞–±–ª–∏—Ü–µ '${tableDef.name}'`);
        }
      }

      console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã: ${tableDef.name} (${existingColumns.length} —Å—Ç–æ–ª–±—Ü–æ–≤)`);
    }
  } catch (error: any) {
    result.errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
 */
async function validateIndexes(result: ValidationResult): Promise<void> {
  try {
    const indexes = await queryClient`
      SELECT indexname, tablename 
      FROM pg_indexes 
      WHERE schemaname = 'public'
    `;

    const existingIndexes = indexes.map(i => i.indexname);
    result.summary.indexesValidated = existingIndexes.length;

    for (const tableDef of EXPECTED_SCHEMA) {
      if (tableDef.requiredIndexes) {
        for (const requiredIndex of tableDef.requiredIndexes) {
          if (!existingIndexes.includes(requiredIndex)) {
            result.errors.push(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å: ${requiredIndex}`);
          } else {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å: ${requiredIndex}`);
          }
        }
      }
    }
  } catch (error: any) {
    result.errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (constraints)
 */
async function validateConstraints(result: ValidationResult): Promise<void> {
  try {
    const constraints = await queryClient`
      SELECT constraint_name, table_name, constraint_type
      FROM information_schema.table_constraints
      WHERE table_schema = 'public'
    `;

    const existingConstraints = constraints.map(c => c.constraint_name);
    result.summary.constraintsVerified = existingConstraints.length;

    for (const tableDef of EXPECTED_SCHEMA) {
      if (tableDef.requiredConstraints) {
        for (const requiredConstraint of tableDef.requiredConstraints) {
          if (!existingConstraints.includes(requiredConstraint)) {
            result.errors.push(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ${requiredConstraint}`);
          } else {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ${requiredConstraint}`);
          }
        }
      }
    }
  } catch (error: any) {
    result.errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ ENUM —Ç–∏–ø–æ–≤
 */
async function validateEnums(result: ValidationResult): Promise<void> {
  try {
    const requiredEnums = [
      'user_role', 'user_status', 'registration_method',
      'order_status', 'story_status', 'subscription_tier',
      'subscription_status', 'verification_type', 'config_type'
    ];

    const existingEnums = await queryClient`
      SELECT typname FROM pg_type WHERE typtype = 'e'
    `;

    const existingEnumNames = existingEnums.map(e => e.typname);

    for (const requiredEnum of requiredEnums) {
      if (!existingEnumNames.includes(requiredEnum)) {
        result.errors.push(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ENUM —Ç–∏–ø: ${requiredEnum}`);
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω ENUM: ${requiredEnum}`);
      }
    }
  } catch (error: any) {
    result.errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ENUM —Ç–∏–ø–æ–≤: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
 */
async function validateBusinessLogic(result: ValidationResult): Promise<void> {
  try {
    for (const tableDef of EXPECTED_SCHEMA) {
      if (tableDef.customChecks) {
        for (const check of tableDef.customChecks) {
          const checkErrors = await check(tableDef.name);
          result.errors.push(...checkErrors);
        }
      }
    }
  } catch (error: any) {
    result.errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
async function validatePerformance(result: ValidationResult): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
    const tableSizes = await queryClient`
      SELECT 
        schemaname,
        tablename,
        attname,
        n_distinct,
        correlation
      FROM pg_stats 
      WHERE schemaname = 'public'
      LIMIT 10
    `;

    if (tableSizes.length > 0) {
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü: ${tableSizes.length} –∑–∞–ø–∏—Å–µ–π`);
    } else {
      result.warnings.push("‚ö†Ô∏è  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ –±–∞–∑–∞ –ø—É—Å—Ç–∞");
    }

  } catch (error: any) {
    result.warnings.push(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${error.message}`);
  }
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users
 */
async function validateUsersLogic(tableName: string): Promise<string[]> {
  const errors: string[] = [];
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å email –ò–õ–ò phone
    const invalidUsers = await queryClient.unsafe(`
      SELECT COUNT(*) 
      FROM ${tableName}
      WHERE (email IS NULL OR email = '') AND (phone IS NULL OR phone = '')
    `);

    if (Number(invalidUsers[0]?.count || 0) > 0) {
      errors.push(`‚ùå –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ email –∏ phone: ${invalidUsers[0]?.count}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ registration_method –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const inconsistentUsers = await queryClient.unsafe(`
      SELECT COUNT(*) 
      FROM ${tableName}
      WHERE (registration_method = 'email' AND (email IS NULL OR email = ''))
         OR (registration_method = 'phone' AND (phone IS NULL OR phone = ''))
    `);

    if (Number(inconsistentUsers[0]?.count || 0) > 0) {
      errors.push(`‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ registration_method –¥–∞–Ω–Ω—ã–º: ${inconsistentUsers[0]?.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

  } catch (error: any) {
    errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ users: ${error.message}`);
  }

  return errors;
}

/**
 * –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç—á—ë—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function printValidationReport(result: ValidationResult): void {
  console.log("=" .repeat(70));
  console.log("üìä –û–¢–ß–Å–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•");
  console.log("=" .repeat(70));

  // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
  if (result.valid) {
    console.log("üéâ –°–¢–ê–¢–£–°: ‚úÖ –°–•–ï–ú–ê –ö–û–†–†–ï–ö–¢–ù–ê");
  } else {
    console.log("‚ö†Ô∏è  –°–¢–ê–¢–£–°: ‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´");
  }

  console.log();

  // –°–≤–æ–¥–∫–∞
  console.log("üìà –°–í–û–î–ö–ê:");
  console.log(`   üìã –¢–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: ${result.summary.tablesFound}`);
  console.log(`   üìã –°—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${result.summary.columnsChecked}`);
  console.log(`   üìã –ò–Ω–¥–µ–∫—Å–æ–≤ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ: ${result.summary.indexesValidated}`);
  console.log(`   üìã –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${result.summary.constraintsVerified}`);

  console.log();

  // –û—à–∏–±–∫–∏
  if (result.errors.length > 0) {
    console.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:");
    result.errors.forEach(error => console.log(`   ${error}`));
    console.log();
  }

  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  if (result.warnings.length > 0) {
    console.log("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:");
    result.warnings.forEach(warning => console.log(`   ${warning}`));
    console.log();
  }

  console.log("=" .repeat(70));
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.main) {
  validateDatabaseSchema().then(result => {
    process.exit(result.valid ? 0 : 1);
  });
}