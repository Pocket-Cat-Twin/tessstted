const fs = require('fs');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

async function directMigration() {
  try {
    console.log('üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ psql...');

    // –ß–∏—Ç–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    console.log('üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏...');
    const migrationContent = fs.readFileSync('./migrations/0000_consolidated_schema.sql', 'utf8');
    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', Math.round(migrationContent.length / 1024), 'KB');

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ psql
    const tempFile = '/tmp/migration.sql';
    fs.writeFileSync(tempFile, migrationContent);
    console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º peer-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const env = {
      ...process.env,
      PGHOST: '/var/run/postgresql', // Unix socket –¥–ª—è peer auth
      PGDATABASE: 'yuyu_lolita',
      PGUSER: 'postgres',
    };

    try {
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
      await execAsync('createdb yuyu_lolita', { env });
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
    } catch (dbError) {
      console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    console.log('üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ö–µ–º—É –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const { stdout, stderr } = await execAsync(`psql -d yuyu_lolita -f ${tempFile}`, { env });
    
    if (stderr && stderr.includes('ERROR')) {
      console.error('‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:');
      console.error(stderr);
    } else {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    }

    // –í—ã–≤–æ–¥–∏–º stdout –µ—Å–ª–∏ –µ—Å—Ç—å
    if (stdout) {
      console.log('üìù –í—ã–≤–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏:');
      console.log(stdout.split('\n').slice(-10).join('\n')); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º enum
    const enumCheck = await execAsync(`psql -d yuyu_lolita -tAc "SELECT 1 FROM pg_type WHERE typname = 'user_verification_status';"`, { env });
    console.log('‚úÖ Enum user_verification_status:', enumCheck.stdout.trim() === '1' ? '–°–û–ó–î–ê–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É
    const columnCheck = await execAsync(`psql -d yuyu_lolita -tAc "SELECT 1 FROM information_schema.columns WHERE table_name = 'users' AND column_name = 'overall_verification_status';"`, { env });
    console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ overall_verification_status:', columnCheck.stdout.trim() === '1' ? '–°–û–ó–î–ê–ù–ê' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
    const criticalFields = ['failed_login_attempts', 'locked_until', 'email_verified_at', 'phone_verified_at'];
    for (const field of criticalFields) {
      const fieldCheck = await execAsync(`psql -d yuyu_lolita -tAc "SELECT 1 FROM information_schema.columns WHERE table_name = 'users' AND column_name = '${field}';"`, { env });
      console.log(`‚úÖ –ü–æ–ª–µ ${field}:`, fieldCheck.stdout.trim() === '1' ? '–°–û–ó–î–ê–ù–û' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É faq_categories
    const faqCheck = await execAsync(`psql -d yuyu_lolita -tAc "SELECT 1 FROM information_schema.tables WHERE table_name = 'faq_categories';"`, { env });
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ faq_categories:', faqCheck.stdout.trim() === '1' ? '–°–û–ó–î–ê–ù–ê' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê');

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ enum'—ã
    const tablesCount = await execAsync(`psql -d yuyu_lolita -tAc "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';"`, { env });
    const enumsCount = await execAsync(`psql -d yuyu_lolita -tAc "SELECT COUNT(*) FROM pg_type WHERE typtype = 'e';"`, { env });

    console.log('üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü —Å–æ–∑–¥–∞–Ω–æ:', tablesCount.stdout.trim());
    console.log('üìä –í—Å–µ–≥–æ enum-–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:', enumsCount.stdout.trim());

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(tempFile);
    console.log('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');

    console.log('üéâ –ü–û–õ–ù–ê–Ø –°–•–ï–ú–ê –ü–†–ò–ú–ï–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å API');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    console.error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', error);
    process.exit(1);
  }
}

directMigration();