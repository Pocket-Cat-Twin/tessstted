const fs = require('fs');
const postgres = require('postgres');

// –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
let adminSql, dbSql;

// –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫–∞–∫ codespace
try {
  adminSql = postgres({
    host: 'localhost',
    port: 5432,
    database: 'template1',
    username: 'codespace',
  });
  dbSql = postgres({
    host: 'localhost',
    port: 5432,
    database: 'yuyu_lolita', 
    username: 'codespace',
  });
} catch (e) {
  // Fallback –∫ postgres
  adminSql = postgres({
    host: 'localhost',
    port: 5432,
    database: 'template1',
    username: 'postgres',
  });
  dbSql = postgres({
    host: 'localhost',
    port: 5432,
    database: 'yuyu_lolita', 
    username: 'postgres',
  });
}

async function resetAndMigrate() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏ –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –®–∞–≥ 1: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ template1 –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ template1...');
    await adminSql`SELECT 1`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ template1');

    // –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–î (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    try {
      await adminSql`DROP DATABASE IF EXISTS yuyu_lolita`;
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞');
    } catch (error) {
      console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞ –∏–ª–∏ –Ω–µ –º–æ–≥–ª–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞');
    }

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ë–î
    console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    await adminSql`CREATE DATABASE yuyu_lolita`;
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö yuyu_lolita —Å–æ–∑–¥–∞–Ω–∞');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await adminSql.end();

    // –®–∞–≥ 4: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –ë–î
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ yuyu_lolita...');
    await dbSql`SELECT NOW()`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ yuyu_lolita');

    // –®–∞–≥ 5: –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    console.log('üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ö–µ–º—É...');
    const migrationContent = fs.readFileSync('./migrations/0000_consolidated_schema.sql', 'utf8');
    console.log('‚úÖ –°—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', Math.round(migrationContent.length / 1024), 'KB');

    // –®–∞–≥ 6: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    console.log('üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Å—Ö–µ–º—É –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await dbSql.unsafe(migrationContent);
    console.log('‚úÖ –°—Ö–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

    // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ö–µ–º—ã...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º enum user_verification_status
    const enumCheck = await dbSql`
      SELECT 1 FROM pg_type WHERE typname = 'user_verification_status'
    `;
    console.log('‚úÖ Enum user_verification_status:', enumCheck.length > 0 ? '–°–û–ó–î–ê–ù' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É overall_verification_status –≤ —Ç–∞–±–ª–∏—Ü–µ users
    const columnCheck = await dbSql`
      SELECT column_name, data_type, column_default 
      FROM information_schema.columns 
      WHERE table_name = 'users' AND column_name = 'overall_verification_status'
    `;
    console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ overall_verification_status:', columnCheck.length > 0 ? '–°–û–ó–î–ê–ù–ê' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê');
    if (columnCheck.length > 0) {
      console.log('   –¢–∏–ø:', columnCheck[0].data_type);
      console.log('   –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:', columnCheck[0].column_default);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
    const criticalFields = ['failed_login_attempts', 'locked_until', 'email_verified_at', 'phone_verified_at'];
    for (const field of criticalFields) {
      const fieldCheck = await dbSql`
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = ${field}
      `;
      console.log(`‚úÖ –ü–æ–ª–µ ${field}:`, fieldCheck.length > 0 ? '–°–û–ó–î–ê–ù–û' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É faq_categories
    const faqCategoriesCheck = await dbSql`
      SELECT 1 FROM information_schema.tables WHERE table_name = 'faq_categories'
    `;
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ faq_categories:', faqCategoriesCheck.length > 0 ? '–°–û–ó–î–ê–ù–ê' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê');

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
    const tablesCount = await dbSql`
      SELECT COUNT(*) as count FROM information_schema.tables 
      WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
    `;
    console.log('üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü —Å–æ–∑–¥–∞–Ω–æ:', tablesCount[0].count);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º enum'—ã
    const enumsCount = await dbSql`
      SELECT COUNT(*) as count FROM pg_type WHERE typtype = 'e'
    `;
    console.log('üìä –í—Å–µ–≥–æ enum-–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:', enumsCount[0].count);

    console.log('üéâ –ü–û–õ–ù–´–ô –°–ë–†–û–° –ò –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  } finally {
    try {
      await dbSql.end();
    } catch (e) {
      console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

resetAndMigrate();