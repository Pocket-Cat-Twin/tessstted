import { z } from "zod";

// Subscription tier definitions according to technical specification
export const SUBSCRIPTION_TIERS = {
  free: {
    id: "free",
    name: "–û–±—ã—á–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫",
    price: 0,
    currency: "RUB",
    duration: null, // permanent
    description: "–†–µ–¥–∫–∏–µ –∑–∞–∫–∞–∑—ã, –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —Å–µ—Ä–≤–∏—Å–æ–º",
    features: {
      maxStorageDays: 14,
      processingTimeHours: 120, // 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
      supportResponseHours: 48,
      canParticipateInPromotions: false,
      canCombineOrders: false,
      hasPriorityProcessing: false,
      hasPersonalSupport: false,
      hasProductInspection: false,
    },
    limits: [
      "‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤: –¥–æ 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π",
      "üì¶ –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ: –¥–æ 14 –¥–Ω–µ–π",
      "‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ü–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö",
      "‚ùå –ù–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏",
      "‚ùå –ù–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫",
    ],
  },
  group: {
    id: "group",
    name: "–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
    price: 990,
    currency: "RUB",
    duration: 30, // days
    description: "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã, —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏",
    features: {
      maxStorageDays: 90, // 3 –º–µ—Å—è—Ü–∞
      processingTimeHours: 72, // 2‚Äì4 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è
      supportResponseHours: 24,
      canParticipateInPromotions: true,
      canCombineOrders: true,
      hasPriorityProcessing: false,
      hasPersonalSupport: false,
      hasProductInspection: false,
    },
    benefits: [
      "üì¶ –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ: –¥–æ 3 –º–µ—Å—è—Ü–µ–≤",
      "üìÆ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤",
      "‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞: 2‚Äì4 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è",
      "üéØ –î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–æ–≤—ã–º –∞–∫—Ü–∏—è–º",
    ],
    limitations: ["‚ùå –ù–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"],
  },
  elite: {
    id: "elite",
    name: "–≠–ª–∏—Ç–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫",
    price: 1990,
    currency: "RUB",
    duration: 30, // days
    description: "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã, —Ü–µ–Ω—è—â–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å–µ—Ä–≤–∏—Å",
    features: {
      maxStorageDays: -1, // –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      processingTimeHours: 24, // –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      supportResponseHours: 12, // –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–æ 12 —á–∞—Å–æ–≤
      canParticipateInPromotions: true,
      canCombineOrders: true,
      hasPriorityProcessing: true,
      hasPersonalSupport: true,
      hasProductInspection: true,
    },
    benefits: [
      "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã: –¥–æ 12 —á–∞—Å–æ–≤",
      "‚ôæÔ∏è –•—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
      "üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤",
      "üîê –£—á–∞—Å—Ç–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∞–∫—Ü–∏—è—Ö",
      "üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞",
      "üéß –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    ],
  },
  vip_temp: {
    id: "vip_temp",
    name: "–†–∞–∑–æ–≤—ã–π VIP-–¥–æ—Å—Ç—É–ø",
    price: 890,
    currency: "RUB",
    duration: 7, // days
    description: "–°—Ä–æ—á–Ω—ã–µ —Ä–∞–∑–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã",
    features: {
      maxStorageDays: 30,
      processingTimeHours: 12, // —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      supportResponseHours: 6,
      canParticipateInPromotions: false,
      canCombineOrders: true,
      hasPriorityProcessing: true,
      hasPersonalSupport: true,
      hasProductInspection: true,
    },
    benefits: [
      "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
      "üì¶ –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ 30 –¥–Ω–µ–π",
      "‚≠ê 1 –∑–∞–∫–∞–∑ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤–Ω–∏–º–∞–Ω–∏–µ–º",
      "‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–µ VIP-–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    ],
  },
} as const;

export type SubscriptionTierId = keyof typeof SUBSCRIPTION_TIERS;

export interface SubscriptionFeatures {
  maxStorageDays: number; // -1 for unlimited
  processingTimeHours: number;
  supportResponseHours: number;
  canParticipateInPromotions: boolean;
  canCombineOrders: boolean;
  hasPriorityProcessing: boolean;
  hasPersonalSupport: boolean;
  hasProductInspection: boolean;
}

export interface UserSubscriptionInfo {
  userId: string;
  currentTier: SubscriptionTierId;
  isActive: boolean;
  expiresAt: Date | null;
  features: SubscriptionFeatures;
  daysRemaining: number | null;
  autoRenew: boolean;
}

/**
 * Get subscription tier information by ID
 */
export function getSubscriptionTier(tierId: SubscriptionTierId) {
  return SUBSCRIPTION_TIERS[tierId];
}

/**
 * Get all subscription tiers
 */
export function getAllSubscriptionTiers() {
  return Object.values(SUBSCRIPTION_TIERS);
}

/**
 * Check if a subscription is currently active
 */
export function isSubscriptionActive(expiresAt: Date | null): boolean {
  if (!expiresAt) return true; // Free tier never expires
  return new Date() < expiresAt;
}

/**
 * Calculate days remaining in subscription
 */
export function getDaysRemaining(expiresAt: Date | null): number | null {
  if (!expiresAt) return null; // Free tier has no expiration

  const now = new Date();
  const diffTime = expiresAt.getTime() - now.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

  return Math.max(0, diffDays);
}

/**
 * Calculate subscription end date
 */
export function calculateSubscriptionEndDate(
  tierId: SubscriptionTierId,
  startDate: Date = new Date(),
): Date | null {
  const tier = getSubscriptionTier(tierId);

  if (!tier.duration) return null; // Free tier never expires

  const endDate = new Date(startDate);
  endDate.setDate(endDate.getDate() + tier.duration);

  return endDate;
}

/**
 * Get user's effective subscription tier (handles expired subscriptions)
 */
export function getEffectiveTier(
  currentTier: SubscriptionTierId,
  expiresAt: Date | null,
): SubscriptionTierId {
  if (currentTier === "free") return "free";

  if (isSubscriptionActive(expiresAt)) {
    return currentTier;
  }

  // Subscription expired, fall back to free
  return "free";
}

/**
 * Check if user can upgrade to a specific tier
 */
export function canUpgradeTo(
  currentTier: SubscriptionTierId,
  targetTier: SubscriptionTierId,
): boolean {
  const tiers: SubscriptionTierId[] = ["free", "group", "elite", "vip_temp"];
  const currentIndex = tiers.indexOf(currentTier);
  const targetIndex = tiers.indexOf(targetTier);

  // VIP temp is a special case - can be purchased from any tier
  if (targetTier === "vip_temp") return true;

  return targetIndex > currentIndex;
}

/**
 * Calculate subscription price with any applicable discounts
 */
export function calculateSubscriptionPrice(
  tierId: SubscriptionTierId,
  discountPercent: number = 0,
): number {
  const tier = getSubscriptionTier(tierId);
  const basePrice = tier.price;

  if (discountPercent <= 0) return basePrice;

  const discountAmount = (basePrice * discountPercent) / 100;
  return Math.max(0, basePrice - discountAmount);
}

/**
 * Validate subscription tier ID
 */
export function isValidSubscriptionTier(
  tierId: string,
): tierId is SubscriptionTierId {
  return tierId in SUBSCRIPTION_TIERS;
}

// Zod schemas for validation
export const subscriptionTierIdSchema = z.enum([
  "free",
  "group",
  "elite",
  "vip_temp",
]);

export const subscriptionFeaturesSchema = z.object({
  maxStorageDays: z.number().int(),
  processingTimeHours: z.number().int().positive(),
  supportResponseHours: z.number().int().positive(),
  canParticipateInPromotions: z.boolean(),
  canCombineOrders: z.boolean(),
  hasPriorityProcessing: z.boolean(),
  hasPersonalSupport: z.boolean(),
  hasProductInspection: z.boolean(),
});

export const userSubscriptionInfoSchema = z.object({
  userId: z.string().uuid(),
  currentTier: subscriptionTierIdSchema,
  isActive: z.boolean(),
  expiresAt: z.date().nullable(),
  features: subscriptionFeaturesSchema,
  daysRemaining: z.number().int().nullable(),
  autoRenew: z.boolean(),
});
