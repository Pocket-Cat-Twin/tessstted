#!/bin/bash

# ============================================================================
# FORCE POSTGRES SETUP - Senior Developer Solution
# ============================================================================
# This script forces the creation of postgres user with postgres password
# by temporarily modifying PostgreSQL configuration
# ============================================================================

set -e

echo "üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê POSTGRES USER"
echo "=========================================="

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() { echo -e "${YELLOW}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Configuration
PG_VERSION="16"
PG_CONFIG_DIR="/etc/postgresql/$PG_VERSION/main"
PG_HBA_FILE="$PG_CONFIG_DIR/pg_hba.conf"
PG_HBA_BACKUP="$PG_CONFIG_DIR/pg_hba.conf.backup.$(date +%s)"

log_info "–¶–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è postgres —Å –ø–∞—Ä–æ–ª–µ–º postgres"
echo ""

# Step 1: Create backup of original pg_hba.conf
log_info "–®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é pg_hba.conf"
if [ -f "$PG_HBA_FILE" ]; then
    # Copy with fallback methods
    cp "$PG_HBA_FILE" "$PG_HBA_BACKUP" 2>/dev/null || \
    cat "$PG_HBA_FILE" > "$PG_HBA_BACKUP" 2>/dev/null || \
    dd if="$PG_HBA_FILE" of="$PG_HBA_BACKUP" 2>/dev/null
    
    if [ -f "$PG_HBA_BACKUP" ]; then
        log_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $PG_HBA_BACKUP"
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
        exit 1
    fi
else
    log_error "–§–∞–π–ª pg_hba.conf –Ω–µ –Ω–∞–π–¥–µ–Ω: $PG_HBA_FILE"
    exit 1
fi

# Step 2: Create temporary pg_hba.conf with trust authentication
log_info "–®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å trust authentication"

cat > /tmp/pg_hba_temp.conf << 'EOF'
# TEMPORARY CONFIGURATION FOR SETUP ONLY
# This allows unrestricted access for setup purposes

# Local connections with trust (no password required)
local   all             all                                     trust
host    all             all             127.0.0.1/32            trust
host    all             all             ::1/128                 trust

# Allow connections from localhost without password for setup
host    all             all             localhost               trust
host    all             all             0.0.0.0/0               trust

# Replication connections
local   replication     all                                     trust
host    replication     all             127.0.0.1/32            trust
host    replication     all             ::1/128                 trust
EOF

# Replace the pg_hba.conf file
if cp /tmp/pg_hba_temp.conf "$PG_HBA_FILE" 2>/dev/null; then
    log_success "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
else
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    # Try alternative methods
    log_info "–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã..."
    
    # Method 2: Direct write
    cat /tmp/pg_hba_temp.conf > "$PG_HBA_FILE" 2>/dev/null && log_success "–ú–µ—Ç–æ–¥ 2 —É—Å–ø–µ—à–µ–Ω" || {
        # Method 3: Using tee
        cat /tmp/pg_hba_temp.conf | tee "$PG_HBA_FILE" >/dev/null 2>&1 && log_success "–ú–µ—Ç–æ–¥ 3 —É—Å–ø–µ—à–µ–Ω" || {
            log_error "–í—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ—É–¥–∞—á–Ω—ã"
            exit 1
        }
    }
fi

# Step 3: Reload PostgreSQL to apply new configuration
log_info "–®–∞–≥ 3: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PostgreSQL"
if service postgresql reload 2>/dev/null; then
    log_success "PostgreSQL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞"
elif systemctl reload postgresql 2>/dev/null; then
    log_success "PostgreSQL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ (systemctl)"
elif pg_ctl reload -D /var/lib/postgresql/16/main 2>/dev/null; then
    log_success "PostgreSQL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ (pg_ctl)"
else
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PostgreSQL"
    # Continue anyway, sometimes it works without reload
fi

# Wait for reload to take effect
sleep 2

# Step 4: Test connection with trust authentication
log_info "–®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å trust authentication"
CONNECTION_TEST_RESULT=""

for attempt in {1..3}; do
    log_info "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è $attempt/3..."
    if psql -h localhost -U postgres -d postgres -c "SELECT current_user, version();" 2>/dev/null; then
        CONNECTION_TEST_RESULT="success"
        log_success "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!"
        break
    else
        log_info "–ü–æ–ø—ã—Ç–∫–∞ $attempt –Ω–µ—É–¥–∞—á–Ω–∞, –∂–¥–µ–º..."
        sleep 2
    fi
done

if [ "$CONNECTION_TEST_RESULT" != "success" ]; then
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥–∞–∂–µ —Å trust authentication"
    log_info "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
    cp "$PG_HBA_BACKUP" "$PG_HBA_FILE" 2>/dev/null
    service postgresql reload 2>/dev/null
    exit 1
fi

# Step 5: Create postgres user with password
log_info "–®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è postgres —Å –ø–∞—Ä–æ–ª–µ–º"

psql -h localhost -U postgres -d postgres << 'EOSQL'
-- Create or update postgres user with password
DO $$
BEGIN
    -- Try to alter existing postgres user
    EXECUTE 'ALTER ROLE postgres PASSWORD ''postgres''';
    RAISE NOTICE '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å postgres –æ–±–Ω–æ–≤–ª–µ–Ω';
EXCEPTION
    WHEN undefined_object THEN
        -- If postgres user doesn't exist, create it
        CREATE ROLE postgres WITH LOGIN SUPERUSER CREATEDB CREATEROLE PASSWORD 'postgres';
        RAISE NOTICE '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å postgres —Å–æ–∑–¥–∞–Ω';
END$$;

-- Ensure all privileges
GRANT ALL PRIVILEGES ON DATABASE template1 TO postgres;
GRANT ALL PRIVILEGES ON DATABASE postgres TO postgres;

-- Show user info
SELECT usename, usesuper, usecreatedb, usecreaterole FROM pg_catalog.pg_user WHERE usename = 'postgres';
EOSQL

if [ $? -eq 0 ]; then
    log_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å postgres —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø–∞—Ä–æ–ª–µ–º!"
else
    log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è postgres"
    cp "$PG_HBA_BACKUP" "$PG_HBA_FILE" 2>/dev/null
    service postgresql reload 2>/dev/null
    exit 1
fi

# Step 6: Restore secure pg_hba.conf configuration
log_info "–®–∞–≥ 6: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"

cat > /tmp/pg_hba_secure.conf << 'EOF'
# SECURE CONFIGURATION WITH PASSWORD AUTHENTICATION
# This requires password authentication for all connections

# Local connections require password
local   all             postgres                                scram-sha-256
local   all             all                                     peer

# TCP/IP connections require password
host    all             postgres        127.0.0.1/32            scram-sha-256
host    all             postgres        ::1/128                 scram-sha-256
host    all             all             127.0.0.1/32            scram-sha-256  
host    all             all             ::1/128                 scram-sha-256

# Replication connections
local   replication     all                                     peer
host    replication     all             127.0.0.1/32            scram-sha-256
host    replication     all             ::1/128                 scram-sha-256
EOF

# Install secure configuration
if cp /tmp/pg_hba_secure.conf "$PG_HBA_FILE" 2>/dev/null; then
    log_success "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
else
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    cp "$PG_HBA_BACKUP" "$PG_HBA_FILE" 2>/dev/null
    service postgresql reload 2>/dev/null
    exit 1
fi

# Step 7: Reload PostgreSQL with secure configuration
log_info "–®–∞–≥ 7: –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
if service postgresql reload 2>/dev/null; then
    log_success "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞"
else
    log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
fi

# Wait for configuration to apply
sleep 3

# Step 8: Test final connection with password
log_info "–®–∞–≥ 8: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º postgres:postgres"

for attempt in {1..3}; do
    log_info "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç $attempt/3..."
    if PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "SELECT current_user, 'SUCCESS: postgres user with password works!' as status;" 2>/dev/null; then
        log_success "üéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å postgres —Å –ø–∞—Ä–æ–ª–µ–º postgres —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        break
    else
        log_info "–¢–µ—Å—Ç $attempt –Ω–µ—É–¥–∞—á–µ–Ω, –∂–¥–µ–º..."
        sleep 2
    fi
done

# Step 9: Create yuyu_lolita database
log_info "–®–∞–≥ 9: –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö yuyu_lolita"
if PGPASSWORD=postgres createdb -h localhost -U postgres yuyu_lolita 2>/dev/null; then
    log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö yuyu_lolita —Å–æ–∑–¥–∞–Ω–∞"
elif PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE yuyu_lolita;" 2>/dev/null; then
    log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö yuyu_lolita —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ SQL"
else
    log_info "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö yuyu_lolita —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
fi

# Step 10: Final verification
log_info "–®–∞–≥ 10: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ yuyu_lolita"
if PGPASSWORD=postgres psql -h localhost -U postgres -d yuyu_lolita -c "SELECT current_database(), current_user;" 2>/dev/null; then
    log_success "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ yuyu_lolita —É—Å–ø–µ—à–Ω–æ!"
else
    log_error "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ yuyu_lolita"
fi

# Cleanup
rm -f /tmp/pg_hba_temp.conf /tmp/pg_hba_secure.conf

echo ""
echo "üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
echo "======================="
echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: postgres"  
echo "‚úÖ –ü–∞—Ä–æ–ª—å: postgres"
echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: yuyu_lolita"
echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: postgresql://postgres:postgres@localhost:5432/yuyu_lolita"
echo ""
echo "–¢–µ–ø–µ—Ä—å API —Å–º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
echo ""

# Final test
log_info "–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
PGPASSWORD=postgres psql postgresql://postgres:postgres@localhost:5432/yuyu_lolita -c "SELECT 'Database is ready!' as result;"